import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isSpy((java.lang.Object) 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader2 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) 1.0f, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        try {
            org.mockito.mock.MockName mockName1 = org.mockito.internal.util.MockUtil.getMockName((java.lang.Object) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader2 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) 1, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyDoubleStream();
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyIntStream();
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.lang.Object obj0 = null;
        try {
            org.mockito.mock.MockCreationSettings mockCreationSettings1 = org.mockito.internal.util.MockUtil.getMockSettings(obj0);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl1 = org.mockito.internal.util.MockUtil.getInvocationContainer((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyStream();
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver2 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer3 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) 100.0f, field1, constructorArgumentResolver2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.mockito.internal.util.reflection.GenericMaster genericMaster0 = new org.mockito.internal.util.reflection.GenericMaster();
        java.lang.reflect.Field field1 = null;
        try {
            java.lang.Class<?> wildcardClass2 = genericMaster0.getGenericType(field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap34 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner35 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj36 = cleanerEnumWeakConcurrentMap34.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner35);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap42 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner43 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj44 = cleanerEnumWeakConcurrentMap42.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap46 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner47 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj48 = cleanerEnumWeakConcurrentMap46.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner47);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap50 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap[] weakConcurrentMapArray52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap[6];
        @SuppressWarnings("unchecked") org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>[] cleanerEnumWeakConcurrentMapArray53 = (org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>[]) weakConcurrentMapArray52;
        cleanerEnumWeakConcurrentMapArray53[0] = cleanerEnumWeakConcurrentMap32;
        cleanerEnumWeakConcurrentMapArray53[1] = cleanerEnumWeakConcurrentMap34;
        cleanerEnumWeakConcurrentMapArray53[2] = cleanerEnumWeakConcurrentMap38;
        cleanerEnumWeakConcurrentMapArray53[3] = cleanerEnumWeakConcurrentMap42;
        cleanerEnumWeakConcurrentMapArray53[4] = cleanerEnumWeakConcurrentMap46;
        cleanerEnumWeakConcurrentMapArray53[5] = cleanerEnumWeakConcurrentMap50;
        try {
            org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>[] cleanerEnumWeakConcurrentMapArray66 = weakConcurrentMap28.toArray(cleanerEnumWeakConcurrentMapArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.Short");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + cleaner35 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner35.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + cleaner43 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner43.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + cleaner47 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner47.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(weakConcurrentMapArray52);
        org.junit.Assert.assertNotNull(cleanerEnumWeakConcurrentMapArray53);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyOptional();
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        try {
            org.mockito.internal.util.MockUtil.resetMock((java.lang.Iterable<java.lang.Object>) objSet25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        java.io.InputStream inputStream0 = null;
        try {
            java.util.Collection<java.lang.String> strCollection1 = org.mockito.internal.util.io.IOUtil.readLines(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        java.io.Closeable closeable0 = null;
        org.mockito.internal.util.io.IOUtil.close(closeable0);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.io.Closeable closeable0 = null;
        org.mockito.internal.util.io.IOUtil.closeQuietly(closeable0);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) 10.0d, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        java.util.Iterator<java.lang.Object> objItor6 = weakConcurrentMap4.iterator();
        java.lang.reflect.Field field7 = null;
        try {
            fieldCopier0.copyValue(objItor3, objItor6, field7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(objItor3);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertNotNull(objItor6);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD;
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) cleaner0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        java.lang.reflect.Field field30 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver31 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer32 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) weakConcurrentMap28, field30, constructorArgumentResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyOptionalInt();
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        java.lang.reflect.Method method0 = null;
        try {
            boolean boolean1 = org.mockito.internal.util.ObjectMethodsGuru.isToStringMethod(method0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        int int30 = weakConcurrentMap28.size();
        try {
            java.lang.Object obj31 = weakConcurrentMap28.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        try {
            java.lang.String str2 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        try {
            java.util.Collection<org.mockito.invocation.Invocation> invocationCollection2 = defaultMockingDetails1.getInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        java.lang.Object obj30 = org.mockito.internal.util.JavaEightUtil.emptyOptionalLong();
        boolean boolean31 = weakConcurrentMap28.remove(obj30);
        try {
            java.lang.String str32 = weakConcurrentMap28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        java.lang.reflect.Field field3 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver4 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer5 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) weakConcurrentMap2, field3, constructorArgumentResolver4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        try {
            java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference8 = cleanerEnumWeakConcurrentMap1.remove((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative timeout value");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver2 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer3 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) (byte) 10, field1, constructorArgumentResolver2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        java.lang.reflect.Method method0 = null;
        try {
            boolean boolean1 = org.mockito.internal.util.ObjectMethodsGuru.isCompareToMethod(method0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi!" + "'", str1.equals("hi!"));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) 1L, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.mockito.internal.util.MockNameImpl mockNameImpl1 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str2 = mockNameImpl1.toString();
        java.lang.reflect.Field field3 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader4 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) str2, field3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.lang.Object obj0 = null;
        boolean boolean1 = org.mockito.internal.util.MockUtil.isSpy(obj0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable11 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap9, "");
        boolean boolean12 = weakConcurrentMap0.equals((java.lang.Object) weakConcurrentMap9);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        try {
            java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap0, objFilter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType boundedType4 = org.mockito.internal.util.Checks.checkNotNull((org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType) wildCardBoundedType1, "hi!", "");
        try {
            java.lang.reflect.Type type5 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(boundedType4);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.mockito.internal.util.reflection.GenericMaster genericMaster0 = new org.mockito.internal.util.reflection.GenericMaster();
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver2 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer3 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) genericMaster0, field1, constructorArgumentResolver2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.mockito.internal.util.MockNameImpl mockNameImpl1 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str2 = mockNameImpl1.toString();
        java.lang.String str3 = mockNameImpl1.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        java.lang.reflect.Field field4 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader5 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) false, field4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        try {
            org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.fetchFrom(thread10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        java.util.Spliterator<java.lang.Object> objSpliterator9 = weakConcurrentMap0.spliterator();
        java.lang.Object[] objArray10 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter11 = null;
        try {
            java.util.LinkedList<java.lang.Object> objList12 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap0, objFilter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objSpliterator9);
        org.junit.Assert.assertNotNull(objArray10);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        boolean boolean4 = weakConcurrentMap2.contains((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        try {
            boolean boolean5 = defaultMockingDetails1.isMock();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.MANUAL;
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleaner0, true, true);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.MANUAL + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.MANUAL));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet28);
        boolean boolean32 = weakConcurrentMap31.isEmpty();
        int int33 = weakConcurrentMap31.size();
        boolean boolean34 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        try {
            java.lang.String str35 = weakConcurrentMap31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(weakConcurrentMap31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        try {
            org.mockito.invocation.MockHandler<java.lang.CharSequence> charSequenceMockHandler1 = org.mockito.internal.util.MockUtil.getMockHandler((java.lang.CharSequence) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver2 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer3 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) (short) -1, field1, constructorArgumentResolver2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        try {
            java.lang.String str28 = weakConcurrentMap26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str13 = mockNameImpl12.toString();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl12);
        java.lang.Thread thread15 = null;
        try {
            org.mockito.mock.MockName mockName16 = mockNameDetachedThreadLocal9.fetchFrom(thread15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.collections.Iterables iterables1 = new org.mockito.internal.util.collections.Iterables();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField2 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) iterables1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        cleanerEnumWeakConcurrentMap4.clear();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        java.lang.Object obj0 = null;
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable5 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap3, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap7.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        cleanerEnumWeakConcurrentMap7.expungeStaleEntries();
        boolean boolean11 = weakConcurrentMap3.add((java.lang.Object) cleanerEnumWeakConcurrentMap7);
        java.util.Spliterator<java.lang.Object> objSpliterator12 = weakConcurrentMap3.spliterator();
        java.lang.Object[] objArray13 = weakConcurrentMap3.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil16 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil17 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil20 = org.mockito.internal.util.Checks.checkNotNull(iOUtil17, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor22 = weakConcurrentMap21.iterator();
        boolean boolean24 = weakConcurrentMap21.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 1, 100.0f, listUtil16, "hi!", (byte) 1, 'a' };
        java.lang.String str27 = org.mockito.internal.util.StringUtil.join(objArray26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray26);
        lenientCopyTool2.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap3, (java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField(obj0, field1, (java.lang.Object) weakConcurrentMap28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable5);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objSpliterator12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(iOUtil20);
        org.junit.Assert.assertNotNull(objItor22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap6, false, false);
        java.lang.Class<?> wildcardClass12 = fieldInitializationReport11.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport19 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap14, false, false);
        java.lang.Class<?> wildcardClass20 = fieldInitializationReport19.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[] { wildcardClass12, wildcardClass20 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray22 = weakConcurrentMap0.toArray(genericDeclarationArray21);
        try {
            org.mockito.invocation.MockHandler<java.lang.Object> objMockHandler23 = org.mockito.internal.util.MockUtil.getMockHandler((java.lang.Object) genericDeclarationArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objSpliterator4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArray22);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.decamelizeMatcher("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "class org.mockito.internal.util.concurrent.WeakConcurrentMap" + "'", str1.equals("class org.mockito.internal.util.concurrent.WeakConcurrentMap"));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        java.lang.Object obj0 = null;
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj3 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean4 = weakConcurrentMap2.equals(obj3);
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap2.iterator();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField(obj0, field1, (java.lang.Object) weakConcurrentMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objItor5);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner7 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet8 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner7);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray9 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList10 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList10, instanceFieldArray9);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields12 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet8, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList10);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields13 = instanceFields12.notNull();
        java.lang.reflect.Field field14 = null;
        try {
            fieldCopier0.copyValue(instanceFields6, instanceFields12, field14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instanceFields13);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable11 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap9, "");
        boolean boolean12 = weakConcurrentMap0.equals((java.lang.Object) weakConcurrentMap9);
        java.lang.reflect.Field field13 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer14 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) weakConcurrentMap0, field13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.mockito.internal.util.io.IOUtil iOUtil0 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil3 = org.mockito.internal.util.Checks.checkNotNull(iOUtil0, "hi!", "hi!");
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl4 = org.mockito.internal.util.MockUtil.getInvocationContainer((java.lang.Object) iOUtil3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(iOUtil3);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        java.lang.reflect.Field field3 = null;
        try {
            fieldCopier0.copyValue("class org.mockito.internal.util.concurrent.WeakConcurrentMap", "class org.mockito.internal.util.concurrent.WeakConcurrentMap", field3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader2 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) 0.0f, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter3 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) (byte) 100, field1, false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner27 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner27 };
        java.util.LinkedHashSet<java.lang.Object> objSet29 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet29, objArray28);
        java.util.Spliterator<java.lang.Object> objSpliterator31 = objSet29.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet29);
        boolean boolean33 = weakConcurrentMap32.isEmpty();
        int int34 = weakConcurrentMap32.size();
        java.util.stream.Stream<java.lang.Object> objStream35 = weakConcurrentMap32.stream();
        try {
            boolean boolean36 = beanPropertySetter3.set((java.lang.Object) objStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner27 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner27.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objSpliterator31);
        org.junit.Assert.assertNotNull(weakConcurrentMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 18 + "'", int34 == 18);
        org.junit.Assert.assertNotNull(objStream35);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.io.IOUtil iOUtil1 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil4 = org.mockito.internal.util.Checks.checkNotNull(iOUtil1, "hi!", "hi!");
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField5 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(iOUtil4);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        try {
            java.lang.Object obj29 = weakConcurrentMap28.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = instanceFields6.notNull();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField8 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) instanceFields6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instanceFields7);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyOptionalLong();
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isMock(obj0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(obj0);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger1 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger2 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        java.lang.reflect.Field field3 = null;
        try {
            fieldCopier0.copyValue(accessibilityChanger1, accessibilityChanger2, field3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        try {
            java.lang.Object obj9 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        java.lang.Thread thread24 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl26 = new org.mockito.internal.util.MockNameImpl("");
        try {
            mockNameDetachedThreadLocal9.define(thread24, (org.mockito.mock.MockName) mockNameImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        try {
            mockNameDetachedThreadLocal9.define(thread10, (org.mockito.mock.MockName) mockNameImpl12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        try {
            boolean boolean1 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.Checks checks2 = new org.mockito.internal.util.Checks();
        boolean boolean3 = wildCardBoundedType1.equals((java.lang.Object) checks2);
        try {
            java.lang.String str4 = wildCardBoundedType1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        java.lang.Object obj0 = null;
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter3 = new org.mockito.internal.util.reflection.BeanPropertySetter(obj0, field1, true);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        boolean boolean28 = identitySet0.contains((java.lang.Object) objArray25);
        boolean boolean30 = identitySet0.contains((java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter3 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) (byte) 100, field1, false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport10 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap5, false, false);
        boolean boolean11 = fieldInitializationReport10.fieldWasInitialized();
        try {
            boolean boolean12 = beanPropertySetter3.set((java.lang.Object) boolean11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        boolean boolean31 = weakConcurrentMap28.isEmpty();
        try {
            java.lang.Object obj32 = weakConcurrentMap28.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        try {
            java.util.Collection<org.mockito.invocation.Invocation> invocationCollection5 = defaultMockingDetails4.getInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.decamelizeMatcher("[]");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<[]>" + "'", str1.equals("<[]>"));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer2 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) 100.0f, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        java.lang.reflect.Field field28 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver29 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer30 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) objSet25, field28, constructorArgumentResolver29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger0 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        java.lang.reflect.AccessibleObject accessibleObject1 = null;
        try {
            accessibilityChanger0.enableAccess(accessibleObject1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet28);
        boolean boolean32 = weakConcurrentMap31.isEmpty();
        int int33 = weakConcurrentMap31.size();
        boolean boolean34 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap37 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap35, "hi!");
        boolean boolean38 = weakConcurrentMap31.add((java.lang.Object) weakConcurrentMap37);
        try {
            java.lang.Object obj39 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(weakConcurrentMap31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, true, true);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        java.lang.Thread thread11 = null;
        try {
            org.mockito.mock.MockName mockName12 = mockNameDetachedThreadLocal9.get(thread11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        int int30 = weakConcurrentMap28.size();
        java.util.stream.Stream<java.lang.Object> objStream31 = weakConcurrentMap28.stream();
        boolean boolean32 = weakConcurrentMap28.isEmpty();
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        java.lang.reflect.Field field6 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer7 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) strWeakConcurrentSet1, field6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "class org.mockito.internal.util.concurrent.WeakConcurrentMap" + "'", str1.equals("class org.mockito.internal.util.concurrent.WeakConcurrentMap"));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection2 = defaultMockingDetails1.getStubbings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj14 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner13);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        boolean boolean17 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference18 = cleanerEnumWeakConcurrentMap1.poll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardReference18);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str13 = mockNameImpl12.toString();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl12);
        mockNameDetachedThreadLocal9.clearAll();
        java.lang.Thread thread16 = null;
        try {
            org.mockito.mock.MockName mockName17 = mockNameDetachedThreadLocal9.fetchFrom(thread16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl2 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str3 = mockNameImpl2.toString();
        boolean boolean4 = mockNameImpl2.isDefault();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField5 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) mockNameImpl2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        try {
            boolean boolean3 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap6, false, false);
        java.lang.Class<?> wildcardClass12 = fieldInitializationReport11.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport19 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap14, false, false);
        java.lang.Class<?> wildcardClass20 = fieldInitializationReport19.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[] { wildcardClass12, wildcardClass20 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray22 = weakConcurrentMap0.toArray(genericDeclarationArray21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap23 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable25 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap23, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap27 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner28 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj29 = cleanerEnumWeakConcurrentMap27.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner28);
        cleanerEnumWeakConcurrentMap27.expungeStaleEntries();
        boolean boolean31 = weakConcurrentMap23.add((java.lang.Object) cleanerEnumWeakConcurrentMap27);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable34 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap32, "");
        boolean boolean35 = weakConcurrentMap23.equals((java.lang.Object) weakConcurrentMap32);
        java.util.stream.Stream<java.lang.Object> objStream36 = weakConcurrentMap32.parallelStream();
        boolean boolean37 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        boolean boolean39 = weakConcurrentMap32.add((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objSpliterator4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArray22);
        org.junit.Assert.assertNotNull(objIterable25);
        org.junit.Assert.assertTrue("'" + cleaner28 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner28.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str13 = mockNameImpl12.toString();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl12);
        mockNameDetachedThreadLocal9.clearAll();
        java.lang.Thread thread16 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl18 = new org.mockito.internal.util.MockNameImpl("<[]>");
        try {
            mockNameDetachedThreadLocal9.define(thread16, (org.mockito.mock.MockName) mockNameImpl18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj29 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean30 = weakConcurrentMap28.equals(obj29);
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap28.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool33 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap34 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable36 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap34, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        cleanerEnumWeakConcurrentMap38.expungeStaleEntries();
        boolean boolean42 = weakConcurrentMap34.add((java.lang.Object) cleanerEnumWeakConcurrentMap38);
        java.util.Spliterator<java.lang.Object> objSpliterator43 = weakConcurrentMap34.spliterator();
        java.lang.Object[] objArray44 = weakConcurrentMap34.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil47 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil51 = org.mockito.internal.util.Checks.checkNotNull(iOUtil48, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor53 = weakConcurrentMap52.iterator();
        boolean boolean55 = weakConcurrentMap52.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 1, 100.0f, listUtil47, "hi!", (byte) 1, 'a' };
        java.lang.String str58 = org.mockito.internal.util.StringUtil.join(objArray57);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray57);
        lenientCopyTool33.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap34, (java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        java.lang.String str61 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean62 = weakConcurrentMap28.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean63 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        try {
            java.lang.Object obj64 = weakConcurrentMap28.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(objIterable36);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objSpliterator43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(iOUtil51);
        org.junit.Assert.assertNotNull(objItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        int int3 = weakConcurrentMap2.size();
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap2.spliterator();
        try {
            org.mockito.invocation.MockHandler<java.util.Spliterator<java.lang.Object>> objSpliteratorMockHandler5 = org.mockito.internal.util.MockUtil.getMockHandler(objSpliterator4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objSpliterator4);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField11 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) weakConcurrentMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.io.IOUtil iOUtil1 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil4 = org.mockito.internal.util.Checks.checkNotNull(iOUtil1, "hi!", "hi!");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport7 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) iOUtil1, true, true);
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField8 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(iOUtil4);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        java.io.File file1 = null;
        try {
            org.mockito.internal.util.io.IOUtil.writeText("", file1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.base.MockitoException; message: Problems writing text to file: null");
        } catch (org.mockito.exceptions.base.MockitoException e) {
        }
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        int int3 = weakConcurrentMap2.size();
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap2.spliterator();
        try {
            java.lang.Object obj5 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objSpliterator4);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper7 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails6);
        try {
            java.util.Collection<org.mockito.invocation.Invocation> invocationCollection8 = defaultMockingDetails6.getInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap6, "hi!");
        int int9 = weakConcurrentMap8.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner10 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean11 = weakConcurrentMap8.contains((java.lang.Object) cleaner10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor13 = weakConcurrentMap12.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool14 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool15 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool16 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool17 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray18 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool14, lenientCopyTool15, lenientCopyTool16, lenientCopyTool17 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray19 = weakConcurrentMap12.toArray(lenientCopyToolArray18);
        java.lang.Object obj20 = null;
        boolean boolean21 = weakConcurrentMap12.remove(obj20);
        java.util.stream.Stream<java.lang.Object> objStream22 = weakConcurrentMap12.stream();
        java.lang.Object obj23 = cleanerEnumWeakConcurrentMap1.put((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner10, (java.lang.Object) objStream22);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(weakConcurrentMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + cleaner10 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner10.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objItor13);
        org.junit.Assert.assertNotNull(lenientCopyToolArray18);
        org.junit.Assert.assertNotNull(lenientCopyToolArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        try {
            java.lang.String str2 = defaultMockingDetails1.printInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        cleanerEnumWeakConcurrentMap11.expungeStaleEntries();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        try {
            java.lang.Object obj2 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        java.lang.Object obj0 = null;
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName(obj0, "");
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference12 = cleanerEnumWeakConcurrentMap1.remove((long) ' ');
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertNull(wildcardReference12);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) false, "<[]>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.MockNameImpl mockNameImpl11 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl11);
        java.lang.Thread thread13 = null;
        try {
            org.mockito.mock.MockName mockName14 = mockNameDetachedThreadLocal9.fetchFrom(thread13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        java.util.stream.Stream<java.lang.Object> objStream10 = weakConcurrentMap0.parallelStream();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner11 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet12 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner11);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray13 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList14 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14, instanceFieldArray13);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields16 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet12, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields17 = instanceFields16.notNull();
        java.util.List<java.lang.Object> objList18 = instanceFields17.assignedValues();
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList19 = instanceFields17.instanceFields();
        boolean boolean20 = weakConcurrentMap0.remove((java.lang.Object) instanceFields17);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instanceFields17);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNotNull(instanceFieldList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        java.lang.reflect.Field field60 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap61 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor62 = weakConcurrentMap61.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool63 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool64 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool65 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool66 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray67 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool63, lenientCopyTool64, lenientCopyTool65, lenientCopyTool66 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray68 = weakConcurrentMap61.toArray(lenientCopyToolArray67);
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) weakConcurrentMap2, field60, (java.lang.Object) lenientCopyToolArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objItor62);
        org.junit.Assert.assertNotNull(lenientCopyToolArray67);
        org.junit.Assert.assertNotNull(lenientCopyToolArray68);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        try {
            java.lang.Object obj4 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType boundedType4 = org.mockito.internal.util.Checks.checkNotNull((org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType) wildCardBoundedType1, "hi!", "");
        try {
            java.lang.String str5 = wildCardBoundedType1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(boundedType4);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        java.lang.reflect.WildcardType wildcardType1 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType2 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType1);
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType2.wildCard();
        java.lang.reflect.WildcardType wildcardType4 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType5 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType4);
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType5.wildCard();
        java.lang.reflect.WildcardType wildcardType7 = wildCardBoundedType5.wildCard();
        lenientCopyTool0.copyToRealObject(wildCardBoundedType2, wildCardBoundedType5);
        try {
            java.lang.String str9 = wildCardBoundedType2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertNull(wildcardType6);
        org.junit.Assert.assertNull(wildcardType7);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner0 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.ConsoleMockitoLogger consoleMockitoLogger2 = new org.mockito.internal.util.ConsoleMockitoLogger();
        org.mockito.internal.util.io.IOUtil iOUtil3 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil6 = org.mockito.internal.util.Checks.checkNotNull(iOUtil3, "hi!", "hi!");
        consoleMockitoLogger2.log((java.lang.Object) iOUtil3);
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) cleaner0, field1, (java.lang.Object) iOUtil3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner0.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNotNull(iOUtil6);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap2.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool7 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool4, lenientCopyTool5, lenientCopyTool6, lenientCopyTool7 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray9 = weakConcurrentMap2.toArray(lenientCopyToolArray8);
        java.lang.Object obj10 = null;
        boolean boolean11 = weakConcurrentMap2.remove(obj10);
        java.util.stream.Stream<java.lang.Object> objStream12 = weakConcurrentMap2.parallelStream();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) (byte) 0, field1, (java.lang.Object) weakConcurrentMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objItor3);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertNotNull(lenientCopyToolArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objStream12);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<org.mockito.internal.util.MockNameImpl, java.lang.reflect.GenericDeclaration[]> mockNameImplWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<org.mockito.internal.util.MockNameImpl, java.lang.reflect.GenericDeclaration[]>(true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        java.util.List<java.lang.Object> objList9 = instanceFields8.assignedValues();
        java.lang.reflect.Field field10 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner11 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet12 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner11);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray13 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList14 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14, instanceFieldArray13);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields16 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet12, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields17 = instanceFields16.notNull();
        java.util.List<java.lang.String> strList18 = instanceFields16.names();
        java.util.List<java.lang.String> strList19 = instanceFields16.names();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) objList9, field10, (java.lang.Object) strList19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instanceFields17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.lang.Class<?>, java.lang.Cloneable> wildcardClassWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.lang.Class<?>, java.lang.Cloneable>();
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap60 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor61 = weakConcurrentMap60.iterator();
        boolean boolean63 = weakConcurrentMap60.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator64 = weakConcurrentMap60.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap66 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner67 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj68 = cleanerEnumWeakConcurrentMap66.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner67);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport71 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap66, false, false);
        java.lang.Class<?> wildcardClass72 = fieldInitializationReport71.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap74 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner75 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj76 = cleanerEnumWeakConcurrentMap74.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner75);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport79 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap74, false, false);
        java.lang.Class<?> wildcardClass80 = fieldInitializationReport79.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray81 = new java.lang.reflect.GenericDeclaration[] { wildcardClass72, wildcardClass80 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray82 = weakConcurrentMap60.toArray(genericDeclarationArray81);
        boolean boolean83 = weakConcurrentMap31.retainAll((java.util.Collection<java.lang.Object>) weakConcurrentMap60);
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objItor61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objSpliterator64);
        org.junit.Assert.assertTrue("'" + cleaner67 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner67.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + cleaner75 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner75.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(genericDeclarationArray81);
        org.junit.Assert.assertNotNull(genericDeclarationArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.pushTo(thread10);
        boolean boolean12 = org.mockito.internal.util.MockUtil.isSpy((java.lang.Object) thread10);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference7 = cleanerEnumWeakConcurrentMap1.poll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(wildcardReference7);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap33 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap31, "hi!");
        int int34 = weakConcurrentMap33.size();
        java.util.Spliterator<java.lang.Object> objSpliterator35 = weakConcurrentMap33.spliterator();
        boolean boolean36 = weakConcurrentMap28.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap33);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter37 = null;
        try {
            java.util.LinkedList<java.lang.Object> objList38 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap28, objFilter37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(weakConcurrentMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Object obj7 = fieldInitializationReport6.fieldInstance();
        java.lang.Class<?> wildcardClass8 = fieldInitializationReport6.fieldClass();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.clear();
        java.lang.Thread thread25 = null;
        try {
            org.mockito.mock.MockName mockName26 = mockNameDetachedThreadLocal9.get(thread25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl27 = new org.mockito.internal.util.MockNameImpl("<[]>");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl27);
        try {
            boolean boolean29 = org.mockito.internal.util.MockUtil.isSpy((java.lang.Object) mockNameDetachedThreadLocal9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        java.lang.Object obj28 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet25);
        java.lang.reflect.Field field29 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter31 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet25, field29, true);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails33 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails36 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails33, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails38 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails36, "hi!");
        try {
            boolean boolean39 = beanPropertySetter31.set((java.lang.Object) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short) 10 + "'", obj28.equals((short) 10));
        org.junit.Assert.assertNotNull(defaultMockingDetails36);
        org.junit.Assert.assertNotNull(defaultMockingDetails38);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        try {
            java.util.Collection<org.mockito.invocation.Invocation> invocationCollection5 = defaultMockingDetails1.getInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        try {
            org.mockito.invocation.MockHandler mockHandler7 = defaultMockingDetails6.getMockHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        int int11 = cleanerEnumWeakConcurrentMap1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap6, false, false);
        java.lang.Class<?> wildcardClass12 = fieldInitializationReport11.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport19 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap14, false, false);
        java.lang.Class<?> wildcardClass20 = fieldInitializationReport19.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[] { wildcardClass12, wildcardClass20 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray22 = weakConcurrentMap0.toArray(genericDeclarationArray21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap23 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable25 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap23, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap27 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner28 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj29 = cleanerEnumWeakConcurrentMap27.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner28);
        cleanerEnumWeakConcurrentMap27.expungeStaleEntries();
        boolean boolean31 = weakConcurrentMap23.add((java.lang.Object) cleanerEnumWeakConcurrentMap27);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable34 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap32, "");
        boolean boolean35 = weakConcurrentMap23.equals((java.lang.Object) weakConcurrentMap32);
        java.util.stream.Stream<java.lang.Object> objStream36 = weakConcurrentMap32.parallelStream();
        boolean boolean37 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap38 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objSpliterator4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArray22);
        org.junit.Assert.assertNotNull(objIterable25);
        org.junit.Assert.assertTrue("'" + cleaner28 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner28.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(weakConcurrentMap38);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.String> strList7 = instanceFields5.names();
        java.util.List<java.lang.String> strList8 = instanceFields5.names();
        java.util.List<java.lang.String> strList9 = instanceFields5.names();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper10 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) strList9);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap2.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap2.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap2.getCleanerThread();
        java.lang.ref.ReferenceQueue<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> cleanerEnumReferenceQueue11 = null;
        java.lang.reflect.Field field12 = null;
        try {
            fieldCopier0.copyValue((java.lang.ref.ReferenceQueue<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>>) cleanerEnumWeakConcurrentMap2, cleanerEnumReferenceQueue11, field12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(thread10);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType boundedType4 = org.mockito.internal.util.Checks.checkNotNull((org.mockito.internal.util.reflection.GenericMetadataSupport.BoundedType) wildCardBoundedType1, "hi!", "");
        try {
            java.lang.String str5 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(boundedType4);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        java.util.Spliterator<java.lang.Object> objSpliterator9 = weakConcurrentMap0.spliterator();
        java.lang.Object[] objArray10 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap11 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray10);
        try {
            org.mockito.mock.MockCreationSettings mockCreationSettings12 = org.mockito.internal.util.MockUtil.getMockSettings((java.lang.Object) weakConcurrentMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objSpliterator9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(weakConcurrentMap11);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("<[]>");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<[]>" + "'", str1.equals("<[]>"));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        java.util.Spliterator<java.lang.Object> objSpliterator9 = weakConcurrentMap0.spliterator();
        java.lang.Object[] objArray10 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner34 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner34 };
        java.util.LinkedHashSet<java.lang.Object> objSet36 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet36, objArray35);
        java.util.Spliterator<java.lang.Object> objSpliterator38 = objSet36.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap39 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet36);
        boolean boolean41 = weakConcurrentMap39.contains((java.lang.Object) (short) 10);
        boolean boolean42 = weakConcurrentMap39.isEmpty();
        boolean boolean43 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap39);
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList44 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields45 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) weakConcurrentMap39, instanceFieldList44);
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objSpliterator9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertTrue("'" + cleaner34 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner34.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objSpliterator38);
        org.junit.Assert.assertNotNull(weakConcurrentMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.util.Iterator<java.lang.Object>, org.mockito.internal.util.reflection.GenericMaster> objItorWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.util.Iterator<java.lang.Object>, org.mockito.internal.util.reflection.GenericMaster>(false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        java.util.Spliterator<java.lang.Object> objSpliterator3 = weakConcurrentMap0.spliterator();
        try {
            org.mockito.invocation.MockHandler<java.util.Spliterator<java.lang.Object>> objSpliteratorMockHandler4 = org.mockito.internal.util.MockUtil.getMockHandler(objSpliterator3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objSpliterator3);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.MockNameImpl mockNameImpl11 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl11);
        java.lang.Thread thread13 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl15 = new org.mockito.internal.util.MockNameImpl("");
        boolean boolean16 = mockNameImpl15.isDefault();
        try {
            mockNameDetachedThreadLocal9.define(thread13, (org.mockito.mock.MockName) mockNameImpl15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.pushTo(thread10);
        java.lang.Thread thread12 = null;
        org.mockito.mock.MockName mockName13 = mockNameDetachedThreadLocal9.pushTo(thread12);
        java.lang.Thread thread14 = null;
        try {
            org.mockito.mock.MockName mockName15 = mockNameDetachedThreadLocal9.fetchFrom(thread14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName11);
        org.junit.Assert.assertNull(mockName13);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap2.iterator();
        java.util.Iterator<java.lang.Object> objItor4 = weakConcurrentMap2.iterator();
        weakConcurrentMap2.clear();
        java.lang.String str6 = org.mockito.internal.util.StringUtil.join("<[]>", "<[]>", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.junit.Assert.assertNotNull(objItor3);
        org.junit.Assert.assertNotNull(objItor4);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        try {
            java.lang.reflect.Type type4 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.reflect.Field field9 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter11 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) fieldInitializationReport6, field9, true);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        java.io.File file1 = null;
        try {
            org.mockito.internal.util.io.IOUtil.writeText("<[]>", file1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.base.MockitoException; message: Problems writing text to file: null");
        } catch (org.mockito.exceptions.base.MockitoException e) {
        }
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        try {
            org.mockito.invocation.MockHandler<org.mockito.internal.util.reflection.FieldCopier> fieldCopierMockHandler1 = org.mockito.internal.util.MockUtil.getMockHandler(fieldCopier0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        java.lang.reflect.WildcardType wildcardType1 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType2 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType1);
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType2.wildCard();
        java.lang.reflect.WildcardType wildcardType4 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType5 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType4);
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType5.wildCard();
        java.lang.reflect.WildcardType wildcardType7 = wildCardBoundedType5.wildCard();
        lenientCopyTool0.copyToRealObject(wildCardBoundedType2, wildCardBoundedType5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner10 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet11 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner10);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray12 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList13 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList13, instanceFieldArray12);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields15 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet11, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList13);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap16 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap18 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap16, "hi!");
        int int19 = weakConcurrentMap18.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner20 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean21 = weakConcurrentMap18.contains((java.lang.Object) cleaner20);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter22 = null;
        java.util.LinkedList<java.lang.Object> objList23 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap18, objFilter22);
        java.util.AbstractSequentialList<java.lang.Object> objList24 = instanceFieldListWithInlinedExpunction9.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList13, (java.util.AbstractSequentialList<java.lang.Object>) objList23);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction25 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner26 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet27 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner26);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray28 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList29 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList29, instanceFieldArray28);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields31 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet27, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList29);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap34 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap32, "hi!");
        int int35 = weakConcurrentMap34.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean37 = weakConcurrentMap34.contains((java.lang.Object) cleaner36);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter38 = null;
        java.util.LinkedList<java.lang.Object> objList39 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap34, objFilter38);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction25.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList29, (java.util.AbstractSequentialList<java.lang.Object>) objList39);
        try {
            lenientCopyTool0.copyToMock(objList24, objList40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertNull(wildcardType6);
        org.junit.Assert.assertNull(wildcardType7);
        org.junit.Assert.assertTrue("'" + cleaner10 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner10.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + cleaner20 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner20.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(objList24);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(objList40);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        java.util.Iterator<java.util.Map.Entry<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>> cleanerEnumEntryItor4 = cleanerEnumWeakConcurrentMap1.iterator();
        java.lang.reflect.Field field5 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver6 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer7 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) cleanerEnumEntryItor4, field5, constructorArgumentResolver6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(cleanerEnumEntryItor4);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        java.lang.Object obj31 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet28);
        java.lang.reflect.Field field32 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter34 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet28, field32, true);
        boolean boolean35 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objSet28);
        java.util.HashSet<java.lang.Object> objSet37 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.HashSet<java.lang.Object>) objSet28, "<[]>");
        java.lang.reflect.Field field38 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver39 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer40 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) objSet28, field38, constructorArgumentResolver39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short) 10 + "'", obj31.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSet37);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl27 = new org.mockito.internal.util.MockNameImpl("<[]>");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl27);
        java.lang.Thread thread29 = null;
        try {
            org.mockito.mock.MockName mockName30 = mockNameDetachedThreadLocal9.get(thread29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails60 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) boolean59);
        java.lang.Object obj61 = defaultMockingDetails60.getMock();
        try {
            java.lang.String str62 = defaultMockingDetails60.printInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + true + "'", obj61.equals(true));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        boolean boolean4 = weakConcurrentMap2.equals((java.lang.Object) (-1));
        java.lang.reflect.Field field5 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader6 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) boolean4, field5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.MockCreationValidator mockCreationValidator1 = new org.mockito.internal.util.MockCreationValidator();
        org.mockito.mock.SerializableMode serializableMode3 = null;
        mockCreationValidator1.validateConstructorUse(true, serializableMode3);
        org.mockito.internal.util.MockCreationValidator mockCreationValidator5 = new org.mockito.internal.util.MockCreationValidator();
        org.mockito.mock.SerializableMode serializableMode7 = null;
        mockCreationValidator5.validateConstructorUse(true, serializableMode7);
        java.lang.reflect.Field field9 = null;
        try {
            fieldCopier0.copyValue(mockCreationValidator1, mockCreationValidator5, field9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) 100L);
        java.lang.reflect.Field field2 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter3 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) defaultMockingDetails1, field2);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner4 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet5 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner4);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray6 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList7 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList7, instanceFieldArray6);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields9 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet5, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList7);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields10 = instanceFields9.notNull();
        java.util.List<java.lang.Object> objList11 = instanceFields10.assignedValues();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields12 = instanceFields10.notNull();
        try {
            boolean boolean13 = beanPropertySetter3.set((java.lang.Object) instanceFields12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(instanceFields10);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertNotNull(instanceFields12);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner24 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner24 };
        java.util.LinkedHashSet<java.lang.Object> objSet26 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet26, objArray25);
        java.util.Spliterator<java.lang.Object> objSpliterator28 = objSet26.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap29 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet26);
        boolean boolean31 = weakConcurrentMap29.contains((java.lang.Object) (short) 10);
        boolean boolean32 = weakConcurrentMap29.isEmpty();
        java.lang.String str33 = org.mockito.internal.util.StringUtil.join("[]", (java.util.Collection<java.lang.Object>) weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + cleaner24 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner24.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objSpliterator28);
        org.junit.Assert.assertNotNull(weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1" + "'", str33.equals("[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1"));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.isEmpty();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        boolean boolean6 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap4);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport9 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) boolean6, false, true);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        try {
            java.lang.Object obj3 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.util.Iterator<java.lang.String> strItor4 = strWeakConcurrentSet3.iterator();
        java.lang.Thread thread5 = strWeakConcurrentSet3.getCleanerThread();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNull(thread5);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        cleanerEnumWeakConcurrentMap2.expungeStaleEntries();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) hashCodeAndEqualsMockWrapper5, "class org.mockito.internal.util.concurrent.WeakConcurrentMap");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields9 = instanceFields5.notNull();
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) instanceFields5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(instanceFields9);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        java.lang.Object obj2 = defaultMockingDetails1.getMock();
        java.lang.reflect.Field field3 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer4 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) defaultMockingDetails1, field3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails2 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails5 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails2, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails5, "hi!");
        identitySet0.add((java.lang.Object) defaultMockingDetails7);
        try {
            java.lang.String str9 = defaultMockingDetails7.printInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails5);
        org.junit.Assert.assertNotNull(defaultMockingDetails7);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        mockNameDetachedThreadLocal9.clearAll();
        mockNameDetachedThreadLocal9.clear();
        org.mockito.mock.MockName mockName13 = mockNameDetachedThreadLocal9.get();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertNull(mockName13);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference6 = cleanerEnumWeakConcurrentMap1.poll();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(wildcardReference6);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str13 = mockNameImpl12.toString();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl12);
        mockNameDetachedThreadLocal9.clearAll();
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner8 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet9 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner8);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray10 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList11 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11, instanceFieldArray10);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields13 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet9, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields14 = instanceFields13.notNull();
        java.util.List<java.lang.Object> objList15 = instanceFields14.assignedValues();
        boolean boolean16 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) objList15);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap17, "hi!");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner43 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner43 };
        java.util.LinkedHashSet<java.lang.Object> objSet45 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet45, objArray44);
        java.util.Spliterator<java.lang.Object> objSpliterator47 = objSet45.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap48 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet45);
        boolean boolean49 = weakConcurrentMap48.isEmpty();
        int int50 = weakConcurrentMap48.size();
        boolean boolean51 = weakConcurrentMap17.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap48);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap54 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap52, "hi!");
        boolean boolean55 = weakConcurrentMap48.add((java.lang.Object) weakConcurrentMap54);
        boolean boolean56 = weakConcurrentMap0.add((java.lang.Object) boolean55);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner8.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instanceFields14);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap19);
        org.junit.Assert.assertTrue("'" + cleaner43 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner43.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objSpliterator47);
        org.junit.Assert.assertNotNull(weakConcurrentMap48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 18 + "'", int50 == 18);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        java.lang.Object obj0 = org.mockito.internal.util.JavaEightUtil.emptyLongStream();
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.collections.IdentitySet identitySet2 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor4 = weakConcurrentMap3.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool7 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool8 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray9 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool5, lenientCopyTool6, lenientCopyTool7, lenientCopyTool8 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray10 = weakConcurrentMap3.toArray(lenientCopyToolArray9);
        java.lang.Object obj11 = null;
        boolean boolean12 = weakConcurrentMap3.remove(obj11);
        java.util.stream.Stream<java.lang.Object> objStream13 = weakConcurrentMap3.stream();
        boolean boolean14 = identitySet2.contains((java.lang.Object) weakConcurrentMap3);
        org.mockito.internal.util.collections.ListUtil listUtil17 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil21 = org.mockito.internal.util.Checks.checkNotNull(iOUtil18, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap22 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor23 = weakConcurrentMap22.iterator();
        boolean boolean25 = weakConcurrentMap22.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 1, 100.0f, listUtil17, "hi!", (byte) 1, 'a' };
        java.lang.String str28 = org.mockito.internal.util.StringUtil.join(objArray27);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap29 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray27);
        boolean boolean30 = identitySet2.contains((java.lang.Object) objArray27);
        java.lang.reflect.Field field31 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter32 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) boolean30, field31);
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField(obj0, field1, (java.lang.Object) beanPropertySetter32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(obj0);
        org.junit.Assert.assertNotNull(objItor4);
        org.junit.Assert.assertNotNull(lenientCopyToolArray9);
        org.junit.Assert.assertNotNull(lenientCopyToolArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(iOUtil21);
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.MockNameImpl mockNameImpl14 = new org.mockito.internal.util.MockNameImpl("");
        boolean boolean15 = mockNameImpl14.isDefault();
        identitySet0.add((java.lang.Object) mockNameImpl14);
        java.lang.String str17 = mockNameImpl14.toString();
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj9 = fieldInitializationReport6.fieldInstance();
        try {
            boolean boolean10 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) fieldInitializationReport6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap0);
        try {
            boolean boolean5 = defaultMockingDetails4.isMock();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        java.lang.Object obj31 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet28);
        java.lang.reflect.Field field32 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter34 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet28, field32, true);
        boolean boolean35 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objSet28);
        java.lang.reflect.Field field36 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader37 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) objSet28, field36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short) 10 + "'", obj31.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap0.iterator();
        java.lang.reflect.Field field4 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter5 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objItor3, field4);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objItor3);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        java.util.Iterator<java.util.Map.Entry<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>> cleanerEnumEntryItor11 = cleanerEnumWeakConcurrentMap1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertNotNull(cleanerEnumEntryItor11);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        try {
            org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((-1L));
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.FriendlyReminderException; message: \n\nDon't panic! I'm just a friendly reminder!\nIt is impossible for time to go backward, therefore...\nYou cannot put negative value of duration: (-1)\nas argument of timer methods (after(), timeout())\n");
        } catch (org.mockito.exceptions.misusing.FriendlyReminderException e) {
        }
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable5 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap3, "");
        boolean boolean6 = weakConcurrentMap2.equals((java.lang.Object) objIterable5);
        try {
            java.lang.Object obj7 = org.mockito.internal.util.collections.Iterables.firstOf(objIterable5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertNotNull(objIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        java.util.Iterator<java.lang.String> strItor2 = strWeakConcurrentSet1.iterator();
        boolean boolean4 = strWeakConcurrentSet1.add("<[]>");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable11 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap9, "");
        boolean boolean12 = weakConcurrentMap0.equals((java.lang.Object) weakConcurrentMap9);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.Spliterator<java.lang.Object> objSpliterator15 = weakConcurrentMap9.spliterator();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(objSpliterator15);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        boolean boolean28 = identitySet0.contains((java.lang.Object) objArray25);
        try {
            boolean boolean29 = org.mockito.internal.util.MockUtil.isSpy((java.lang.Object) identitySet0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable16 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap14, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap18 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner19 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj20 = cleanerEnumWeakConcurrentMap18.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner19);
        cleanerEnumWeakConcurrentMap18.expungeStaleEntries();
        boolean boolean22 = weakConcurrentMap14.add((java.lang.Object) cleanerEnumWeakConcurrentMap18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap23 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable25 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap23, "");
        boolean boolean26 = weakConcurrentMap14.equals((java.lang.Object) weakConcurrentMap23);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter27 = null;
        java.util.LinkedList<java.lang.Object> objList28 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap23, objFilter27);
        boolean boolean29 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objList28);
        try {
            java.lang.Object obj30 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objIterable16);
        org.junit.Assert.assertTrue("'" + cleaner19 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner19.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper4 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        java.util.Spliterator<java.lang.Object> objSpliterator5 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper6 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) objSpliterator5);
        try {
            java.lang.String str7 = hashCodeAndEqualsMockWrapper6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSpliterator5);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Spliterator<java.lang.Object> objSpliterator1 = weakConcurrentMap0.spliterator();
        org.junit.Assert.assertNotNull(objSpliterator1);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        java.util.stream.Stream<java.lang.Object> objStream10 = weakConcurrentMap0.stream();
        try {
            boolean boolean11 = org.mockito.internal.util.MockUtil.isMock((java.lang.Object) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objStream10);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        java.util.stream.Stream<java.lang.Object> objStream10 = weakConcurrentMap0.stream();
        weakConcurrentMap0.clear();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objStream10);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer2 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) 100, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType1.wildCard();
        try {
            java.lang.String str4 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNull(wildcardType3);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        boolean boolean4 = fieldInitializationReport3.fieldWasInitialized();
        java.lang.Object obj5 = fieldInitializationReport3.fieldInstance();
        java.lang.Object obj6 = fieldInitializationReport3.fieldInstance();
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport3.fieldClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (short) 10 + "'", obj5.equals((short) 10));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (short) 10 + "'", obj6.equals((short) 10));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        int int30 = weakConcurrentMap28.size();
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap28.iterator();
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
        org.junit.Assert.assertNotNull(objItor31);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.decamelizeMatcher("<custom argument matcher><[]>null");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<<custom argument matcher><[]>null>" + "'", str1.equals("<<custom argument matcher><[]>null>"));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        int int30 = weakConcurrentMap28.size();
        java.util.stream.Stream<java.lang.Object> objStream31 = weakConcurrentMap28.stream();
        try {
            java.lang.Object obj32 = weakConcurrentMap28.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
        org.junit.Assert.assertNotNull(objStream31);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.isEmpty();
        try {
            java.lang.Object obj4 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) 100L);
        java.lang.reflect.Field field2 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter3 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) defaultMockingDetails1, field2);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool7 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool8 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool9 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray10 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool6, lenientCopyTool7, lenientCopyTool8, lenientCopyTool9 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray11 = weakConcurrentMap4.toArray(lenientCopyToolArray10);
        try {
            boolean boolean12 = beanPropertySetter3.set((java.lang.Object) weakConcurrentMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertNotNull(lenientCopyToolArray10);
        org.junit.Assert.assertNotNull(lenientCopyToolArray11);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        try {
            org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.FriendlyReminderException; message: \n\nDon't panic! I'm just a friendly reminder!\nIt is impossible for time to go backward, therefore...\nYou cannot put negative value of duration: (-1)\nas argument of timer methods (after(), timeout())\n");
        } catch (org.mockito.exceptions.misusing.FriendlyReminderException e) {
        }
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType1.wildCard();
        boolean boolean5 = wildCardBoundedType1.equals((java.lang.Object) true);
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        java.util.RandomAccess randomAccess0 = null;
        try {
            java.util.RandomAccess randomAccess3 = org.mockito.internal.util.Checks.checkNotNull(randomAccess0, "", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message:  should not be null. ");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) fieldInitializationReport6, "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.util.Iterator<java.util.Map.Entry<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>> cleanerEnumEntryItor6 = cleanerEnumWeakConcurrentMap1.iterator();
        try {
            org.mockito.mock.MockCreationSettings mockCreationSettings7 = org.mockito.internal.util.MockUtil.getMockSettings((java.lang.Object) cleanerEnumWeakConcurrentMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(cleanerEnumEntryItor6);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((long) 18);
        long long2 = timer1.duration();
        boolean boolean3 = timer1.isCounting();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 18L + "'", long2 == 18L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        try {
            java.lang.String str5 = defaultMockingDetails4.printInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        java.util.Iterator<java.util.Map.Entry<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>> cleanerEnumEntryItor4 = cleanerEnumWeakConcurrentMap2.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(cleanerEnumEntryItor4);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj2 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean3 = weakConcurrentMap1.equals(obj2);
        java.util.Iterator<java.lang.Object> objItor4 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable9 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap7, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner12);
        cleanerEnumWeakConcurrentMap11.expungeStaleEntries();
        boolean boolean15 = weakConcurrentMap7.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        java.util.Spliterator<java.lang.Object> objSpliterator16 = weakConcurrentMap7.spliterator();
        java.lang.Object[] objArray17 = weakConcurrentMap7.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil20 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil21 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil24 = org.mockito.internal.util.Checks.checkNotNull(iOUtil21, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap25 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor26 = weakConcurrentMap25.iterator();
        boolean boolean28 = weakConcurrentMap25.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 1, 100.0f, listUtil20, "hi!", (byte) 1, 'a' };
        java.lang.String str31 = org.mockito.internal.util.StringUtil.join(objArray30);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray30);
        lenientCopyTool6.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap7, (java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        java.lang.String str34 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap7);
        boolean boolean35 = weakConcurrentMap1.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap7);
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField36 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) weakConcurrentMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objItor4);
        org.junit.Assert.assertNotNull(objIterable9);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objSpliterator16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(iOUtil24);
        org.junit.Assert.assertNotNull(objItor26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(weakConcurrentMap32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        strWeakConcurrentSet1.clear();
        strWeakConcurrentSet1.clear();
        boolean boolean9 = strWeakConcurrentSet1.contains("<<custom argument matcher><[]>null>");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor47 = instanceFieldListWithInlinedExpunction1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor47);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner8 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet9 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner8);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray10 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList11 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11, instanceFieldArray10);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields13 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet9, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields14 = instanceFields13.notNull();
        java.util.List<java.lang.Object> objList15 = instanceFields14.assignedValues();
        boolean boolean16 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.stream();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner8.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instanceFields14);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objStream17);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        int int47 = instanceFieldListWithInlinedExpunction1.approximateSize();
        try {
            org.mockito.invocation.MockHandler<org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListWithInlinedExpunctionMockHandler48 = org.mockito.internal.util.MockUtil.getMockHandler(instanceFieldListWithInlinedExpunction1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        java.util.stream.Stream<java.lang.Object> objStream10 = weakConcurrentMap0.stream();
        try {
            org.mockito.internal.util.MockUtil.resetMock(objStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objStream10);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable11 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap9, "");
        boolean boolean12 = weakConcurrentMap0.equals((java.lang.Object) weakConcurrentMap9);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap13 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
        java.util.Spliterator<java.lang.Object> objSpliterator14 = weakConcurrentMap0.spliterator();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap13);
        org.junit.Assert.assertNotNull(objSpliterator14);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner27 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner27 };
        java.util.LinkedHashSet<java.lang.Object> objSet29 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet29, objArray28);
        java.util.Spliterator<java.lang.Object> objSpliterator31 = objSet29.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet29);
        boolean boolean33 = weakConcurrentMap32.isEmpty();
        int int34 = weakConcurrentMap32.size();
        java.util.stream.Stream<java.lang.Object> objStream35 = weakConcurrentMap32.stream();
        boolean boolean36 = weakConcurrentMap0.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objItor3);
        org.junit.Assert.assertTrue("'" + cleaner27 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner27.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objSpliterator31);
        org.junit.Assert.assertNotNull(weakConcurrentMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 18 + "'", int34 == 18);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean4 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap3);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap1);
        java.util.Spliterator<java.lang.Object> objSpliterator6 = weakConcurrentMap1.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream7 = weakConcurrentMap1.stream();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField8 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) weakConcurrentMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objSpliterator6);
        org.junit.Assert.assertNotNull(objStream7);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        java.util.Spliterator<java.lang.Object> objSpliterator3 = weakConcurrentMap0.spliterator();
        int int4 = weakConcurrentMap0.size();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj29 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean30 = weakConcurrentMap28.equals(obj29);
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap28.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool33 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap34 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable36 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap34, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        cleanerEnumWeakConcurrentMap38.expungeStaleEntries();
        boolean boolean42 = weakConcurrentMap34.add((java.lang.Object) cleanerEnumWeakConcurrentMap38);
        java.util.Spliterator<java.lang.Object> objSpliterator43 = weakConcurrentMap34.spliterator();
        java.lang.Object[] objArray44 = weakConcurrentMap34.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil47 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil51 = org.mockito.internal.util.Checks.checkNotNull(iOUtil48, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor53 = weakConcurrentMap52.iterator();
        boolean boolean55 = weakConcurrentMap52.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 1, 100.0f, listUtil47, "hi!", (byte) 1, 'a' };
        java.lang.String str58 = org.mockito.internal.util.StringUtil.join(objArray57);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray57);
        lenientCopyTool33.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap34, (java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        java.lang.String str61 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean62 = weakConcurrentMap28.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean63 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        try {
            java.lang.Object obj64 = weakConcurrentMap26.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(objIterable36);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objSpliterator43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(iOUtil51);
        org.junit.Assert.assertNotNull(objItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray4 = weakConcurrentMap0.toArray();
        weakConcurrentMap0.clear();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.mockito.internal.util.Primitives primitives0 = new org.mockito.internal.util.Primitives();
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) primitives0, false, false);
        org.mockito.internal.util.Primitives primitives5 = org.mockito.internal.util.Checks.checkNotNull(primitives0, "");
        org.junit.Assert.assertNotNull(primitives5);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap0);
        java.lang.Object obj5 = defaultMockingDetails4.getMock();
        try {
            java.lang.String str6 = defaultMockingDetails4.printInvocations();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.clear();
        java.lang.Thread thread25 = null;
        try {
            org.mockito.mock.MockName mockName26 = mockNameDetachedThreadLocal9.fetchFrom(thread25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.mockito.internal.util.io.IOUtil iOUtil0 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil3 = org.mockito.internal.util.Checks.checkNotNull(iOUtil0, "hi!", "hi!");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) iOUtil0, true, true);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        org.junit.Assert.assertNotNull(iOUtil3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj2 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean3 = weakConcurrentMap1.equals(obj2);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner27 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner27 };
        java.util.LinkedHashSet<java.lang.Object> objSet29 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet29, objArray28);
        java.util.Spliterator<java.lang.Object> objSpliterator31 = objSet29.spliterator();
        java.lang.Object obj32 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet29);
        java.lang.reflect.Field field33 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter35 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet29, field33, true);
        boolean boolean36 = weakConcurrentMap1.containsAll((java.util.Collection<java.lang.Object>) objSet29);
        java.util.HashSet<java.lang.Object> objSet38 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.HashSet<java.lang.Object>) objSet29, "<[]>");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner62 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner62 };
        java.util.LinkedHashSet<java.lang.Object> objSet64 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet64, objArray63);
        java.util.Spliterator<java.lang.Object> objSpliterator66 = objSet64.spliterator();
        java.lang.Object obj67 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet64);
        java.lang.reflect.Field field68 = null;
        try {
            fieldCopier0.copyValue((java.util.AbstractCollection<java.lang.Object>) objSet38, (java.util.AbstractCollection<java.lang.Object>) objSet64, field68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + cleaner27 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner27.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objSpliterator31);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short) 10 + "'", obj32.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertTrue("'" + cleaner62 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner62.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objSpliterator66);
        org.junit.Assert.assertTrue("'" + obj67 + "' != '" + (short) 10 + "'", obj67.equals((short) 10));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        weakConcurrentMap0.clear();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.Checks checks2 = new org.mockito.internal.util.Checks();
        boolean boolean3 = wildCardBoundedType1.equals((java.lang.Object) checks2);
        boolean boolean5 = wildCardBoundedType1.equals((java.lang.Object) "");
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType1.wildCard();
        try {
            java.lang.String str7 = wildcardType6.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardType6);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        java.lang.reflect.WildcardType wildcardType1 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType2 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType1);
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType2.wildCard();
        java.lang.reflect.WildcardType wildcardType4 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType5 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType4);
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType5.wildCard();
        java.lang.reflect.WildcardType wildcardType7 = wildCardBoundedType5.wildCard();
        lenientCopyTool0.copyToRealObject(wildCardBoundedType2, wildCardBoundedType5);
        java.lang.reflect.Field field9 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver10 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer11 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) lenientCopyTool0, field9, constructorArgumentResolver10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertNull(wildcardType6);
        org.junit.Assert.assertNull(wildcardType7);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner3 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet4 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner3);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray5 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList6 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList6, instanceFieldArray5);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet4, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList6);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap11 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap9, "hi!");
        int int12 = weakConcurrentMap11.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean14 = weakConcurrentMap11.contains((java.lang.Object) cleaner13);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter15 = null;
        java.util.LinkedList<java.lang.Object> objList16 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap11, objFilter15);
        java.util.AbstractSequentialList<java.lang.Object> objList17 = instanceFieldListWithInlinedExpunction2.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList6, (java.util.AbstractSequentialList<java.lang.Object>) objList16);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray18 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList19 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList19, instanceFieldArray18);
        java.util.AbstractSequentialList<java.lang.Object> objList21 = instanceFieldListWithInlinedExpunction2.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList19);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction22 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray23 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList24 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList24, instanceFieldArray23);
        boolean boolean26 = instanceFieldListWithInlinedExpunction22.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList24);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray27 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList28 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList28, instanceFieldArray27);
        boolean boolean30 = instanceFieldListWithInlinedExpunction22.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList28);
        lenientCopyTool1.copyToRealObject(instanceFieldListWithInlinedExpunction2, instanceFieldListWithInlinedExpunction22);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap39 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap41 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap39, "hi!");
        int int42 = weakConcurrentMap41.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner43 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean44 = weakConcurrentMap41.contains((java.lang.Object) cleaner43);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter45 = null;
        java.util.LinkedList<java.lang.Object> objList46 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap41, objFilter45);
        java.util.AbstractSequentialList<java.lang.Object> objList47 = instanceFieldListWithInlinedExpunction32.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, (java.util.AbstractSequentialList<java.lang.Object>) objList46);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool48 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner50 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet51 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner50);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray52 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList53 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList53, instanceFieldArray52);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields55 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet51, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList53);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap58 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap56, "hi!");
        int int59 = weakConcurrentMap58.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner60 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean61 = weakConcurrentMap58.contains((java.lang.Object) cleaner60);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter62 = null;
        java.util.LinkedList<java.lang.Object> objList63 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap58, objFilter62);
        java.util.AbstractSequentialList<java.lang.Object> objList64 = instanceFieldListWithInlinedExpunction49.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList53, (java.util.AbstractSequentialList<java.lang.Object>) objList63);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray65 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList66 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList66, instanceFieldArray65);
        java.util.AbstractSequentialList<java.lang.Object> objList68 = instanceFieldListWithInlinedExpunction49.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList66);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction69 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray70 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList71 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList71, instanceFieldArray70);
        boolean boolean73 = instanceFieldListWithInlinedExpunction69.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList71);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray74 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList75 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList75, instanceFieldArray74);
        boolean boolean77 = instanceFieldListWithInlinedExpunction69.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList75);
        lenientCopyTool48.copyToRealObject(instanceFieldListWithInlinedExpunction49, instanceFieldListWithInlinedExpunction69);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor79 = instanceFieldListWithInlinedExpunction49.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction80 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner81 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet82 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner81);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray83 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList84 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList84, instanceFieldArray83);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields86 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet82, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList84);
        boolean boolean87 = instanceFieldListWithInlinedExpunction80.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList84);
        java.util.AbstractSequentialList<java.lang.Object> objList88 = instanceFieldListWithInlinedExpunction49.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList84);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction89 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray90 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList91 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList91, instanceFieldArray90);
        boolean boolean93 = instanceFieldListWithInlinedExpunction89.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList91);
        boolean boolean94 = instanceFieldListWithInlinedExpunction49.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList91);
        java.util.AbstractSequentialList<java.lang.Object> objList95 = instanceFieldListWithInlinedExpunction32.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList91);
        java.lang.reflect.Field field96 = null;
        try {
            fieldCopier0.copyValue(instanceFieldListWithInlinedExpunction2, instanceFieldListWithInlinedExpunction32, field96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner3 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner3.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(objList17);
        org.junit.Assert.assertNotNull(instanceFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(objList21);
        org.junit.Assert.assertNotNull(instanceFieldArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + cleaner43 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner43.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(objList47);
        org.junit.Assert.assertTrue("'" + cleaner50 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner50.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + cleaner60 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner60.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(objList64);
        org.junit.Assert.assertNotNull(instanceFieldArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(objList68);
        org.junit.Assert.assertNotNull(instanceFieldArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor79);
        org.junit.Assert.assertTrue("'" + cleaner81 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner81.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(objList88);
        org.junit.Assert.assertNotNull(instanceFieldArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(objList95);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        java.util.List<java.lang.Object> objList9 = instanceFields8.assignedValues();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields10 = instanceFields8.notNull();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields11 = instanceFields8.notNull();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNotNull(instanceFields10);
        org.junit.Assert.assertNotNull(instanceFields11);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        java.util.Iterator<java.util.Map.Entry<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>> cleanerEnumEntryItor4 = cleanerEnumWeakConcurrentMap1.iterator();
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference5 = cleanerEnumWeakConcurrentMap1.poll();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(cleanerEnumEntryItor4);
        org.junit.Assert.assertNull(wildcardReference5);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        java.lang.reflect.Field field0 = null;
        java.lang.Object obj1 = null;
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField2 = new org.mockito.internal.util.reflection.InstanceField(field0, obj1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        java.util.Iterator<java.lang.String> strItor7 = strWeakConcurrentSet1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        java.lang.Object obj31 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet28);
        java.lang.reflect.Field field32 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter34 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet28, field32, true);
        boolean boolean35 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objSet28);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner36 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet37 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner36);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray38 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList39 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39, instanceFieldArray38);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields41 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet37, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields42 = instanceFields41.notNull();
        java.util.List<java.lang.Object> objList43 = instanceFields42.assignedValues();
        boolean boolean44 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objList43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap46 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner47 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj48 = cleanerEnumWeakConcurrentMap46.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner47);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport51 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap46, false, false);
        java.lang.Class<?> wildcardClass52 = fieldInitializationReport51.fieldClass();
        boolean boolean53 = fieldInitializationReport51.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj54 = fieldInitializationReport51.fieldInstance();
        java.lang.Object obj55 = fieldInitializationReport51.fieldInstance();
        boolean boolean56 = weakConcurrentMap0.equals((java.lang.Object) fieldInitializationReport51);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap58 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap60 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner61 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj62 = cleanerEnumWeakConcurrentMap60.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner61);
        java.lang.Object obj63 = cleanerEnumWeakConcurrentMap58.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner61);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner64 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj65 = cleanerEnumWeakConcurrentMap58.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner64);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal66 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner64);
        java.lang.Thread thread67 = null;
        org.mockito.mock.MockName mockName68 = mockNameDetachedThreadLocal66.pushTo(thread67);
        boolean boolean69 = weakConcurrentMap0.remove((java.lang.Object) thread67);
        try {
            java.lang.Object obj70 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short) 10 + "'", obj31.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instanceFields42);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + cleaner47 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner47.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + cleaner61 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner61.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + cleaner64 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner64.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(mockName68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap0);
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection5 = defaultMockingDetails4.getStubbings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.String> strList7 = instanceFields5.names();
        java.util.List<java.lang.String> strList8 = instanceFields5.names();
        java.util.List<java.lang.String> strList9 = instanceFields5.names();
        java.util.List<java.lang.String> strList10 = instanceFields5.names();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = null;
        try {
            org.mockito.internal.util.MockUtil.resetMock(fieldCopier0);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap3 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertNotNull(weakConcurrentMap3);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap7, "hi!");
        int int10 = weakConcurrentMap9.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean12 = weakConcurrentMap9.contains((java.lang.Object) cleaner11);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.AbstractSequentialList<java.lang.Object> objList15 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, (java.util.AbstractSequentialList<java.lang.Object>) objList14);
        int int16 = instanceFieldListWithInlinedExpunction0.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(objList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        java.lang.Object obj2 = defaultMockingDetails1.getMock();
        try {
            org.mockito.mock.MockCreationSettings<?> wildcardMockCreationSettings3 = defaultMockingDetails1.getMockCreationSettings();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        mockNameDetachedThreadLocal9.clear();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap26 = mockNameDetachedThreadLocal9.getBackingMap();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap26);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        java.lang.reflect.Field field2 = null;
        org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver constructorArgumentResolver3 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer4 = new org.mockito.internal.util.reflection.FieldInitializer(obj0, field2, constructorArgumentResolver3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        try {
            java.lang.String str10 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails60 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) boolean59);
        try {
            org.mockito.invocation.MockHandler mockHandler61 = defaultMockingDetails60.getMockHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        mockNameDetachedThreadLocal9.clearAll();
        java.lang.Thread thread12 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl14 = new org.mockito.internal.util.MockNameImpl("");
        boolean boolean15 = mockNameImpl14.isDefault();
        try {
            mockNameDetachedThreadLocal9.define(thread12, (org.mockito.mock.MockName) mockNameImpl14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(true);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        int int4 = cleanerEnumWeakConcurrentMap1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        java.lang.Object obj31 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet28);
        java.lang.reflect.Field field32 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter34 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet28, field32, true);
        boolean boolean35 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objSet28);
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) objSet28, "<custom argument matcher><[]>null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short) 10 + "'", obj31.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.stream.Stream<java.lang.Object> objStream1 = weakConcurrentMap0.stream();
        org.junit.Assert.assertNotNull(objStream1);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.decamelizeMatcher("hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<hi!>" + "'", str1.equals("<hi!>"));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        java.lang.String str2 = org.mockito.internal.util.Checks.checkNotNull("[]", "[]");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport4 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, true);
        boolean boolean5 = fieldInitializationReport4.fieldWasInitializedUsingContructorArgs();
        java.lang.reflect.Field field6 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner7 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet8 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner7);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray9 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList10 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList10, instanceFieldArray9);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields12 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet8, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList10);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields13 = instanceFields12.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter14 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields15 = instanceFields12.filter(instanceFieldFilter14);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields16 = instanceFields12.notNull();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) boolean5, field6, (java.lang.Object) instanceFields12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instanceFields13);
        org.junit.Assert.assertNotNull(instanceFields15);
        org.junit.Assert.assertNotNull(instanceFields16);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        int int47 = instanceFieldListWithInlinedExpunction1.approximateSize();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction48 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray49 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList50 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList50, instanceFieldArray49);
        boolean boolean52 = instanceFieldListWithInlinedExpunction48.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList50);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray53 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList54 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54, instanceFieldArray53);
        boolean boolean56 = instanceFieldListWithInlinedExpunction48.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        java.util.AbstractSequentialList<java.lang.Object> objList57 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(instanceFieldArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(objList57);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.mockito.internal.util.collections.ListUtil listUtil0 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.collections.ListUtil listUtil2 = org.mockito.internal.util.Checks.checkNotNull(listUtil0, "[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
        org.junit.Assert.assertNotNull(listUtil2);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.Object> objList7 = instanceFields6.assignedValues();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields6.notNull();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields9 = instanceFields6.notNull();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(instanceFields9);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner3 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj4 = cleanerEnumWeakConcurrentMap2.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner3);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport7 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap2, false, false);
        java.lang.Class<?> wildcardClass8 = fieldInitializationReport7.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap10 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj12 = cleanerEnumWeakConcurrentMap10.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner11);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport15 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap10, false, false);
        java.lang.Class<?> wildcardClass16 = fieldInitializationReport15.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap18 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner19 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj20 = cleanerEnumWeakConcurrentMap18.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner19);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport23 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap18, false, false);
        java.lang.Class<?> wildcardClass24 = fieldInitializationReport23.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray25 = new java.lang.reflect.GenericDeclaration[] { wildcardClass8, wildcardClass16, wildcardClass24 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray28 = org.mockito.internal.util.Checks.checkNotNull(genericDeclarationArray25, "class org.mockito.internal.util.concurrent.WeakConcurrentMap", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap29 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Object[]) genericDeclarationArray25);
        java.lang.String str30 = org.mockito.internal.util.StringUtil.join("", (java.util.Collection<java.lang.Object>) weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + cleaner3 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner3.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + cleaner19 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner19.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(genericDeclarationArray25);
        org.junit.Assert.assertNotNull(genericDeclarationArray28);
        org.junit.Assert.assertNotNull(weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "class org.mockito.internal.util.concurrent.WeakConcurrentMap" + "'", str30.equals("class org.mockito.internal.util.concurrent.WeakConcurrentMap"));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        boolean boolean28 = identitySet0.contains((java.lang.Object) objArray25);
        org.mockito.internal.util.collections.IdentitySet identitySet29 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap30 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap30.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool32 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool33 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool34 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool35 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray36 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool32, lenientCopyTool33, lenientCopyTool34, lenientCopyTool35 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray37 = weakConcurrentMap30.toArray(lenientCopyToolArray36);
        java.lang.Object obj38 = null;
        boolean boolean39 = weakConcurrentMap30.remove(obj38);
        java.util.stream.Stream<java.lang.Object> objStream40 = weakConcurrentMap30.stream();
        boolean boolean41 = identitySet29.contains((java.lang.Object) weakConcurrentMap30);
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        boolean boolean57 = identitySet29.contains((java.lang.Object) objArray54);
        identitySet0.add((java.lang.Object) boolean57);
        org.mockito.internal.util.collections.ListUtil listUtil61 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil62 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil65 = org.mockito.internal.util.Checks.checkNotNull(iOUtil62, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap66 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor67 = weakConcurrentMap66.iterator();
        boolean boolean69 = weakConcurrentMap66.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 1, 100.0f, listUtil61, "hi!", (byte) 1, 'a' };
        java.lang.String str72 = org.mockito.internal.util.StringUtil.join(objArray71);
        boolean boolean73 = identitySet0.contains((java.lang.Object) objArray71);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(lenientCopyToolArray36);
        org.junit.Assert.assertNotNull(lenientCopyToolArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iOUtil65);
        org.junit.Assert.assertNotNull(objItor67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean9 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        boolean boolean9 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.Class<?> wildcardClass10 = fieldInitializationReport6.fieldClass();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl7 = org.mockito.internal.util.MockUtil.getInvocationContainer((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap7, "hi!");
        int int10 = weakConcurrentMap9.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean12 = weakConcurrentMap9.contains((java.lang.Object) cleaner11);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.AbstractSequentialList<java.lang.Object> objList15 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, (java.util.AbstractSequentialList<java.lang.Object>) objList14);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray16 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList17 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList17, instanceFieldArray16);
        java.util.AbstractSequentialList<java.lang.Object> objList19 = instanceFieldListWithInlinedExpunction0.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList17);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor20 = instanceFieldListWithInlinedExpunction0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool21 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction22 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner23 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet24 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray25 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList26 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList26, instanceFieldArray25);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields28 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet24, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap29 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap29, "hi!");
        int int32 = weakConcurrentMap31.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner33 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean34 = weakConcurrentMap31.contains((java.lang.Object) cleaner33);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter35 = null;
        java.util.LinkedList<java.lang.Object> objList36 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap31, objFilter35);
        java.util.AbstractSequentialList<java.lang.Object> objList37 = instanceFieldListWithInlinedExpunction22.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList26, (java.util.AbstractSequentialList<java.lang.Object>) objList36);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray38 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList39 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39, instanceFieldArray38);
        java.util.AbstractSequentialList<java.lang.Object> objList41 = instanceFieldListWithInlinedExpunction22.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction42 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray43 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList44 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList44, instanceFieldArray43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction42.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList44);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray47 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList48 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList48, instanceFieldArray47);
        boolean boolean50 = instanceFieldListWithInlinedExpunction42.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList48);
        lenientCopyTool21.copyToRealObject(instanceFieldListWithInlinedExpunction22, instanceFieldListWithInlinedExpunction42);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor52 = instanceFieldListWithInlinedExpunction22.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction53 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner54 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet55 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner54);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray56 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList57 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList57, instanceFieldArray56);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields59 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet55, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList57);
        boolean boolean60 = instanceFieldListWithInlinedExpunction53.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList57);
        java.util.AbstractSequentialList<java.lang.Object> objList61 = instanceFieldListWithInlinedExpunction22.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList57);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields62 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) instanceFieldListEntryItor20, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList57);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields63 = instanceFields62.notNull();
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(objList15);
        org.junit.Assert.assertNotNull(instanceFieldArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(objList19);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor20);
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(objList37);
        org.junit.Assert.assertNotNull(instanceFieldArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(objList41);
        org.junit.Assert.assertNotNull(instanceFieldArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor52);
        org.junit.Assert.assertTrue("'" + cleaner54 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner54.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(objList61);
        org.junit.Assert.assertNotNull(instanceFields63);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        int int3 = weakConcurrentMap2.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean5 = weakConcurrentMap2.contains((java.lang.Object) cleaner4);
        int int6 = weakConcurrentMap2.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner30 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner30 };
        java.util.LinkedHashSet<java.lang.Object> objSet32 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet32, objArray31);
        java.util.Spliterator<java.lang.Object> objSpliterator34 = objSet32.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap35 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet32);
        boolean boolean36 = weakConcurrentMap35.isEmpty();
        java.lang.Object obj37 = org.mockito.internal.util.JavaEightUtil.emptyOptionalLong();
        boolean boolean38 = weakConcurrentMap35.remove(obj37);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap39 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap41 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap39, "hi!");
        int int42 = weakConcurrentMap41.size();
        boolean boolean43 = weakConcurrentMap35.equals((java.lang.Object) weakConcurrentMap41);
        boolean boolean44 = weakConcurrentMap2.contains((java.lang.Object) weakConcurrentMap35);
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + cleaner30 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner30.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertNotNull(weakConcurrentMap35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.Object> objList7 = instanceFields6.assignedValues();
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList8 = instanceFields6.instanceFields();
        try {
            org.mockito.internal.util.MockUtil.resetMock(instanceFieldList8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(instanceFieldList8);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        identitySet0.add((java.lang.Object) weakConcurrentMap28);
        java.lang.Class<?> wildcardClass30 = weakConcurrentMap28.getClass();
        try {
            org.mockito.mock.MockCreationSettings mockCreationSettings31 = org.mockito.internal.util.MockUtil.getMockSettings((java.lang.Object) wildcardClass30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        java.util.Iterator<java.lang.String> strItor3 = strWeakConcurrentSet2.iterator();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField4 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) strWeakConcurrentSet2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strItor3);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.get();
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertNull(mockName11);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner0 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal1 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner0);
        org.mockito.internal.util.MockNameImpl mockNameImpl3 = new org.mockito.internal.util.MockNameImpl("[]");
        mockNameDetachedThreadLocal1.set((org.mockito.mock.MockName) mockNameImpl3);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        try {
            boolean boolean2 = defaultMockingDetails1.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        java.util.List<java.lang.Object> objList9 = instanceFields8.assignedValues();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields10 = instanceFields8.notNull();
        java.util.List<java.lang.Object> objList11 = instanceFields10.assignedValues();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNotNull(instanceFields10);
        org.junit.Assert.assertNotNull(objList11);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap0);
        try {
            org.mockito.mock.MockCreationSettings<?> wildcardMockCreationSettings5 = defaultMockingDetails4.getMockCreationSettings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection2 = defaultMockingDetails1.getStubbings();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) boolean8, false, false);
        java.lang.Class<?> wildcardClass12 = fieldInitializationReport11.fieldClass();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        boolean boolean28 = identitySet0.contains((java.lang.Object) objArray25);
        java.lang.reflect.Field field29 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader30 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) identitySet0, field29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.isEmpty();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        boolean boolean6 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap4);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap4);
        try {
            boolean boolean8 = defaultMockingDetails7.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.Checks checks2 = new org.mockito.internal.util.Checks();
        boolean boolean3 = wildCardBoundedType1.equals((java.lang.Object) checks2);
        boolean boolean5 = wildCardBoundedType1.equals((java.lang.Object) "");
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType1.wildCard();
        try {
            java.lang.reflect.Type type7 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardType6);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator4 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap6, false, false);
        java.lang.Class<?> wildcardClass12 = fieldInitializationReport11.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport19 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap14, false, false);
        java.lang.Class<?> wildcardClass20 = fieldInitializationReport19.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[] { wildcardClass12, wildcardClass20 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray22 = weakConcurrentMap0.toArray(genericDeclarationArray21);
        try {
            java.lang.Object obj23 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objSpliterator4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArray22);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        boolean boolean4 = weakConcurrentMap2.equals((java.lang.Object) (-1));
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap2.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator6 = weakConcurrentMap2.spliterator();
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertNotNull(objSpliterator6);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        java.lang.String str3 = weakConcurrentMap0.toString();
        try {
            java.lang.Object obj4 = weakConcurrentMap0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException; message: null");
        } catch (java.lang.CloneNotSupportedException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        boolean boolean4 = weakConcurrentMap2.equals((java.lang.Object) (-1));
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl5 = org.mockito.internal.util.MockUtil.getInvocationContainer((java.lang.Object) boolean4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.MockNameImpl mockNameImpl11 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl11);
        java.lang.Thread thread13 = null;
        org.mockito.mock.MockName mockName14 = mockNameDetachedThreadLocal9.pushTo(thread13);
        java.lang.Thread thread15 = null;
        org.mockito.mock.MockName mockName16 = mockNameDetachedThreadLocal9.pushTo(thread15);
        mockNameDetachedThreadLocal9.clear();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName14);
        org.junit.Assert.assertNull(mockName16);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.CharSequence, org.mockito.internal.util.reflection.GenericTypeExtractor> charSequenceWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.CharSequence, org.mockito.internal.util.reflection.GenericTypeExtractor>(false);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        java.lang.reflect.Type[] typeArray10 = wildCardBoundedType1.interfaceBounds();
        try {
            java.lang.reflect.Type type11 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap7, "hi!");
        int int10 = weakConcurrentMap9.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean12 = weakConcurrentMap9.contains((java.lang.Object) cleaner11);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.AbstractSequentialList<java.lang.Object> objList15 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, (java.util.AbstractSequentialList<java.lang.Object>) objList14);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray16 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList17 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList17, instanceFieldArray16);
        java.util.AbstractSequentialList<java.lang.Object> objList19 = instanceFieldListWithInlinedExpunction0.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList17);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor20 = instanceFieldListWithInlinedExpunction0.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner22 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet23 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner22);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray24 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList25 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList25, instanceFieldArray24);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields27 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet23, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap30 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap28, "hi!");
        int int31 = weakConcurrentMap30.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner32 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean33 = weakConcurrentMap30.contains((java.lang.Object) cleaner32);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter34 = null;
        java.util.LinkedList<java.lang.Object> objList35 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap30, objFilter34);
        java.util.AbstractSequentialList<java.lang.Object> objList36 = instanceFieldListWithInlinedExpunction21.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList25, (java.util.AbstractSequentialList<java.lang.Object>) objList35);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction37 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner38 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet39 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner38);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray40 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList41 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41, instanceFieldArray40);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields43 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet39, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41);
        boolean boolean44 = instanceFieldListWithInlinedExpunction37.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41);
        java.lang.reflect.Field field45 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter46 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) instanceFieldList41, field45);
        java.util.AbstractSequentialList<java.lang.Object> objList47 = instanceFieldListWithInlinedExpunction21.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap48 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable50 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap48, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner53 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj54 = cleanerEnumWeakConcurrentMap52.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner53);
        cleanerEnumWeakConcurrentMap52.expungeStaleEntries();
        boolean boolean56 = weakConcurrentMap48.add((java.lang.Object) cleanerEnumWeakConcurrentMap52);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap57 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable59 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap57, "");
        boolean boolean60 = weakConcurrentMap48.equals((java.lang.Object) weakConcurrentMap57);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter61 = null;
        java.util.LinkedList<java.lang.Object> objList62 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap57, objFilter61);
        java.util.AbstractSequentialList<java.lang.Object> objList63 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41, (java.util.AbstractSequentialList<java.lang.Object>) objList62);
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(objList15);
        org.junit.Assert.assertNotNull(instanceFieldArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(objList19);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor20);
        org.junit.Assert.assertTrue("'" + cleaner22 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner22.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + cleaner32 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner32.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(objList36);
        org.junit.Assert.assertTrue("'" + cleaner38 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner38.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(objList47);
        org.junit.Assert.assertNotNull(objIterable50);
        org.junit.Assert.assertTrue("'" + cleaner53 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner53.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objIterable59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(objList63);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj14 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner13);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        boolean boolean17 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper18 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) boolean17);
        org.mockito.internal.util.MockNameImpl mockNameImpl20 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str21 = mockNameImpl20.toString();
        boolean boolean22 = mockNameImpl20.isDefault();
        boolean boolean23 = mockNameImpl20.isDefault();
        boolean boolean24 = hashCodeAndEqualsMockWrapper18.equals((java.lang.Object) mockNameImpl20);
        try {
            java.lang.String str25 = hashCodeAndEqualsMockWrapper18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper18);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        java.lang.Object obj28 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet25);
        java.util.Spliterator<java.lang.Object> objSpliterator29 = objSet25.spliterator();
        java.util.LinkedHashSet<java.lang.Object> objSet31 = org.mockito.internal.util.Checks.checkItemsNotNull(objSet25, "<<custom argument matcher><[]>null>");
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short) 10 + "'", obj28.equals((short) 10));
        org.junit.Assert.assertNotNull(objSpliterator29);
        org.junit.Assert.assertNotNull(objSet31);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<org.mockito.internal.util.Timer, java.lang.CharSequence> timerWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<org.mockito.internal.util.Timer, java.lang.CharSequence>();
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap7, "hi!");
        int int10 = weakConcurrentMap9.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean12 = weakConcurrentMap9.contains((java.lang.Object) cleaner11);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.AbstractSequentialList<java.lang.Object> objList15 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, (java.util.AbstractSequentialList<java.lang.Object>) objList14);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction16 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner17 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet18 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner17);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray19 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList20 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList20, instanceFieldArray19);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields22 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet18, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList20);
        boolean boolean23 = instanceFieldListWithInlinedExpunction16.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList20);
        java.lang.reflect.Field field24 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter25 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) instanceFieldList20, field24);
        java.util.AbstractSequentialList<java.lang.Object> objList26 = instanceFieldListWithInlinedExpunction0.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList20);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor27 = instanceFieldListWithInlinedExpunction0.iterator();
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(objList15);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner17.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(objList26);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor27);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.lang.String str2 = weakConcurrentMap0.toString();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet28);
        boolean boolean32 = weakConcurrentMap31.isEmpty();
        int int33 = weakConcurrentMap31.size();
        java.util.Spliterator<java.lang.Object> objSpliterator34 = weakConcurrentMap31.spliterator();
        boolean boolean35 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(weakConcurrentMap31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        strWeakConcurrentSet1.expungeStaleEntries();
        java.util.Iterator<java.lang.String> strItor12 = strWeakConcurrentSet1.iterator();
        strWeakConcurrentSet1.clear();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor12);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj14 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner13);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        boolean boolean17 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        java.lang.reflect.Field field18 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader19 = new org.mockito.internal.util.reflection.FieldReader((java.lang.Object) cleaner15, field18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal7 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap8 = mockNameDetachedThreadLocal7.getBackingMap();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap8);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        java.lang.reflect.Type[] typeArray4 = wildCardBoundedType1.interfaceBounds();
        try {
            java.lang.reflect.Type type5 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper4 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) hashCodeAndEqualsMockWrapper4);
        try {
            java.lang.String str6 = hashCodeAndEqualsMockWrapper4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.mockito.internal.util.Checks checks0 = new org.mockito.internal.util.Checks();
        try {
            org.mockito.invocation.MockHandler<org.mockito.internal.util.Checks> checksMockHandler1 = org.mockito.internal.util.MockUtil.getMockHandler(checks0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.isEmpty();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        boolean boolean6 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap4);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap4);
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection8 = defaultMockingDetails7.getStubbings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        java.lang.Object[] objArray14 = weakConcurrentMap0.toArray();
        try {
            org.mockito.mock.MockName mockName15 = org.mockito.internal.util.MockUtil.getMockName((java.lang.Object) weakConcurrentMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails60 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) boolean59);
        try {
            boolean boolean61 = defaultMockingDetails60.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor5 = weakConcurrentMap4.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool7 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool8 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool9 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray10 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool6, lenientCopyTool7, lenientCopyTool8, lenientCopyTool9 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray11 = weakConcurrentMap4.toArray(lenientCopyToolArray10);
        java.lang.Object obj12 = null;
        boolean boolean13 = weakConcurrentMap4.remove(obj12);
        java.util.stream.Stream<java.lang.Object> objStream14 = weakConcurrentMap4.stream();
        boolean boolean15 = weakConcurrentMap0.add((java.lang.Object) weakConcurrentMap4);
        boolean boolean16 = weakConcurrentMap4.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertNotNull(lenientCopyToolArray10);
        org.junit.Assert.assertNotNull(lenientCopyToolArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        java.lang.Object obj0 = null;
        java.lang.reflect.Field field1 = null;
        try {
            org.mockito.internal.util.reflection.FieldReader fieldReader2 = new org.mockito.internal.util.reflection.FieldReader(obj0, field1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        boolean boolean9 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        boolean boolean10 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet28);
        boolean boolean32 = weakConcurrentMap31.isEmpty();
        int int33 = weakConcurrentMap31.size();
        boolean boolean34 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap37 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap35, "hi!");
        boolean boolean38 = weakConcurrentMap31.add((java.lang.Object) weakConcurrentMap37);
        java.util.stream.Stream<java.lang.Object> objStream39 = weakConcurrentMap37.stream();
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(weakConcurrentMap31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objStream39);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) 100L);
        try {
            org.mockito.invocation.MockHandler mockHandler2 = defaultMockingDetails1.getMockHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap> weakConcurrentMapWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.MockNameImpl> mockNameImplWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.MockNameImpl>(cleaner0);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.pushTo(thread10);
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName11);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails2 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails5 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails2, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails5, "hi!");
        identitySet0.add((java.lang.Object) defaultMockingDetails7);
        try {
            boolean boolean9 = defaultMockingDetails7.isMock();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails5);
        org.junit.Assert.assertNotNull(defaultMockingDetails7);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.mockito.internal.util.collections.ListUtil listUtil2 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil3 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil6 = org.mockito.internal.util.Checks.checkNotNull(iOUtil3, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor8 = weakConcurrentMap7.iterator();
        boolean boolean10 = weakConcurrentMap7.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 1, 100.0f, listUtil2, "hi!", (byte) 1, 'a' };
        java.lang.String str13 = org.mockito.internal.util.StringUtil.join(objArray12);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap14 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray12);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap15 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray12);
        boolean boolean16 = weakConcurrentMap15.isEmpty();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable19 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap17, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner22 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj23 = cleanerEnumWeakConcurrentMap21.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner22);
        cleanerEnumWeakConcurrentMap21.expungeStaleEntries();
        boolean boolean25 = weakConcurrentMap17.add((java.lang.Object) cleanerEnumWeakConcurrentMap21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean29 = weakConcurrentMap26.add((java.lang.Object) cleanerEnumWeakConcurrentMap28);
        boolean boolean30 = weakConcurrentMap17.add((java.lang.Object) cleanerEnumWeakConcurrentMap28);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap40 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable42 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap40, "");
        boolean boolean43 = weakConcurrentMap31.equals((java.lang.Object) weakConcurrentMap40);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter44 = null;
        java.util.LinkedList<java.lang.Object> objList45 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap40, objFilter44);
        boolean boolean46 = weakConcurrentMap17.containsAll((java.util.Collection<java.lang.Object>) objList45);
        java.util.AbstractSequentialList<java.lang.Object> objList48 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.AbstractSequentialList<java.lang.Object>) objList45, "<[]>");
        boolean boolean49 = weakConcurrentMap15.addAll((java.util.Collection<java.lang.Object>) objList48);
        org.junit.Assert.assertNotNull(iOUtil6);
        org.junit.Assert.assertNotNull(objItor8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(weakConcurrentMap14);
        org.junit.Assert.assertNotNull(weakConcurrentMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objIterable19);
        org.junit.Assert.assertTrue("'" + cleaner22 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner22.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        int int47 = instanceFieldListWithInlinedExpunction1.approximateSize();
        int int48 = instanceFieldListWithInlinedExpunction1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper7 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails6);
        java.lang.Object obj8 = hashCodeAndEqualsMockWrapper7.get();
        try {
            java.lang.String str9 = hashCodeAndEqualsMockWrapper7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper7 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails6);
        try {
            java.lang.String str8 = hashCodeAndEqualsMockWrapper7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable16 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap14, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap18 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner19 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj20 = cleanerEnumWeakConcurrentMap18.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner19);
        cleanerEnumWeakConcurrentMap18.expungeStaleEntries();
        boolean boolean22 = weakConcurrentMap14.add((java.lang.Object) cleanerEnumWeakConcurrentMap18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap23 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable25 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap23, "");
        boolean boolean26 = weakConcurrentMap14.equals((java.lang.Object) weakConcurrentMap23);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter27 = null;
        java.util.LinkedList<java.lang.Object> objList28 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap23, objFilter27);
        boolean boolean29 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objList28);
        try {
            java.lang.String str30 = weakConcurrentMap0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objIterable16);
        org.junit.Assert.assertTrue("'" + cleaner19 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner19.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        boolean boolean2 = defaultMockingDetails1.isSpy();
        boolean boolean3 = defaultMockingDetails1.isSpy();
        boolean boolean4 = defaultMockingDetails1.isMock();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((long) 18);
        timer1.start();
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.mockito.internal.util.collections.ListUtil listUtil2 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil3 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil6 = org.mockito.internal.util.Checks.checkNotNull(iOUtil3, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor8 = weakConcurrentMap7.iterator();
        boolean boolean10 = weakConcurrentMap7.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 1, 100.0f, listUtil2, "hi!", (byte) 1, 'a' };
        java.lang.String str13 = org.mockito.internal.util.StringUtil.join(objArray12);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap14 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray12);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap15 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray12);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap16 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray12);
        try {
            java.lang.String str17 = weakConcurrentMap16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(iOUtil6);
        org.junit.Assert.assertNotNull(objItor8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(weakConcurrentMap14);
        org.junit.Assert.assertNotNull(weakConcurrentMap15);
        org.junit.Assert.assertNotNull(weakConcurrentMap16);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.Checks checks2 = new org.mockito.internal.util.Checks();
        boolean boolean3 = wildCardBoundedType1.equals((java.lang.Object) checks2);
        try {
            java.lang.reflect.Type type4 = wildCardBoundedType1.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        org.mockito.internal.util.Checks checks2 = new org.mockito.internal.util.Checks();
        boolean boolean3 = wildCardBoundedType1.equals((java.lang.Object) checks2);
        try {
            java.lang.String str4 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap> weakConcurrentMapWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails9 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection10 = defaultMockingDetails9.getStubbings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        java.lang.Thread thread10 = null;
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.pushTo(thread10);
        java.lang.Thread thread12 = null;
        org.mockito.mock.MockName mockName13 = mockNameDetachedThreadLocal9.pushTo(thread12);
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName11);
        org.junit.Assert.assertNull(mockName13);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        boolean boolean2 = defaultMockingDetails1.isSpy();
        try {
            org.mockito.mock.MockCreationSettings<?> wildcardMockCreationSettings3 = defaultMockingDetails1.getMockCreationSettings();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        strWeakConcurrentSet1.expungeStaleEntries();
        java.util.Iterator<java.lang.String> strItor12 = strWeakConcurrentSet1.iterator();
        int int13 = strWeakConcurrentSet1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.MockNameImpl mockNameImpl11 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl11);
        org.mockito.mock.MockName mockName13 = mockNameDetachedThreadLocal9.get();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap14 = mockNameDetachedThreadLocal9.getBackingMap();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(mockName13);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap14);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        java.lang.reflect.WildcardType wildcardType1 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType2 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType1);
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType2.wildCard();
        java.lang.reflect.WildcardType wildcardType4 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType5 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType4);
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType5.wildCard();
        java.lang.reflect.WildcardType wildcardType7 = wildCardBoundedType5.wildCard();
        lenientCopyTool0.copyToRealObject(wildCardBoundedType2, wildCardBoundedType5);
        try {
            java.lang.reflect.Type type9 = wildCardBoundedType2.firstBound();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertNull(wildcardType6);
        org.junit.Assert.assertNull(wildcardType7);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner0 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL;
        org.mockito.internal.util.concurrent.DetachedThreadLocal<java.lang.Thread> threadDetachedThreadLocal1 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<java.lang.Thread>(cleaner0);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL + "'", cleaner0.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj9 = fieldInitializationReport6.fieldInstance();
        boolean boolean10 = fieldInitializationReport6.fieldWasInitialized();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        java.util.Spliterator<java.lang.Object> objSpliterator3 = weakConcurrentMap0.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean7 = weakConcurrentMap4.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper8 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap4);
        java.lang.Object obj9 = hashCodeAndEqualsMockWrapper8.get();
        boolean boolean10 = weakConcurrentMap0.equals(obj9);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        boolean boolean4 = fieldInitializationReport3.fieldWasInitialized();
        java.lang.Object obj5 = fieldInitializationReport3.fieldInstance();
        boolean boolean6 = fieldInitializationReport3.fieldWasInitialized();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (short) 10 + "'", obj5.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.String str8 = org.mockito.internal.util.StringUtil.join((java.lang.Object[]) lenientCopyToolArray7);
        java.lang.String str9 = org.mockito.internal.util.StringUtil.join((java.lang.Object[]) lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor32 = instanceFieldListWithInlinedExpunction1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor32);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("<<custom argument matcher><[]>null>");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<<custom argument matcher><[]>null>" + "'", str1.equals("<<custom argument matcher><[]>null>"));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.mockito.internal.util.io.IOUtil iOUtil0 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil3 = org.mockito.internal.util.Checks.checkNotNull(iOUtil0, "hi!", "hi!");
        org.mockito.internal.util.io.IOUtil iOUtil6 = org.mockito.internal.util.Checks.checkNotNull(iOUtil0, "hi!", "class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        org.junit.Assert.assertNotNull(iOUtil3);
        org.junit.Assert.assertNotNull(iOUtil6);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        java.lang.Thread thread11 = strWeakConcurrentSet1.getCleanerThread();
        java.util.Iterator<java.lang.String> strItor12 = strWeakConcurrentSet1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(thread11);
        org.junit.Assert.assertNotNull(strItor12);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        int int8 = weakConcurrentMap0.size();
        java.lang.Object[] objArray9 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool12 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable15 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap13, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap17.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        cleanerEnumWeakConcurrentMap17.expungeStaleEntries();
        boolean boolean21 = weakConcurrentMap13.add((java.lang.Object) cleanerEnumWeakConcurrentMap17);
        java.util.Spliterator<java.lang.Object> objSpliterator22 = weakConcurrentMap13.spliterator();
        java.lang.Object[] objArray23 = weakConcurrentMap13.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil26 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil27 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil30 = org.mockito.internal.util.Checks.checkNotNull(iOUtil27, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor32 = weakConcurrentMap31.iterator();
        boolean boolean34 = weakConcurrentMap31.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 1, 100.0f, listUtil26, "hi!", (byte) 1, 'a' };
        java.lang.String str37 = org.mockito.internal.util.StringUtil.join(objArray36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap38 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray36);
        lenientCopyTool12.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap13, (java.util.Collection<java.lang.Object>) weakConcurrentMap38);
        java.lang.String str40 = org.mockito.internal.util.StringUtil.join("class org.mockito.internal.util.concurrent.WeakConcurrentMap", "", (java.util.Collection<java.lang.Object>) weakConcurrentMap13);
        org.mockito.internal.util.collections.ListUtil listUtil43 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil44 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil47 = org.mockito.internal.util.Checks.checkNotNull(iOUtil44, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap48 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor49 = weakConcurrentMap48.iterator();
        boolean boolean51 = weakConcurrentMap48.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 1, 100.0f, listUtil43, "hi!", (byte) 1, 'a' };
        java.lang.String str54 = org.mockito.internal.util.StringUtil.join(objArray53);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap55 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray53);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray53);
        boolean boolean57 = weakConcurrentMap13.retainAll((java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        boolean boolean59 = weakConcurrentMap13.remove((java.lang.Object) 1.0d);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap60 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable62 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap60, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap64 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner65 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj66 = cleanerEnumWeakConcurrentMap64.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner65);
        cleanerEnumWeakConcurrentMap64.expungeStaleEntries();
        boolean boolean68 = weakConcurrentMap60.add((java.lang.Object) cleanerEnumWeakConcurrentMap64);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap69 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap71 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean72 = weakConcurrentMap69.add((java.lang.Object) cleanerEnumWeakConcurrentMap71);
        boolean boolean73 = weakConcurrentMap60.add((java.lang.Object) cleanerEnumWeakConcurrentMap71);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap74 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable76 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap74, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap78 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner79 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj80 = cleanerEnumWeakConcurrentMap78.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner79);
        cleanerEnumWeakConcurrentMap78.expungeStaleEntries();
        boolean boolean82 = weakConcurrentMap74.add((java.lang.Object) cleanerEnumWeakConcurrentMap78);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap83 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable85 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap83, "");
        boolean boolean86 = weakConcurrentMap74.equals((java.lang.Object) weakConcurrentMap83);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter87 = null;
        java.util.LinkedList<java.lang.Object> objList88 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap83, objFilter87);
        boolean boolean89 = weakConcurrentMap60.containsAll((java.util.Collection<java.lang.Object>) objList88);
        java.util.AbstractSequentialList<java.lang.Object> objList91 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.AbstractSequentialList<java.lang.Object>) objList88, "<[]>");
        java.util.AbstractCollection[] abstractCollectionArray93 = new java.util.AbstractCollection[1];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Object>[] objCollectionArray94 = (java.util.AbstractCollection<java.lang.Object>[]) abstractCollectionArray93;
        objCollectionArray94[0] = objList88;
        java.util.AbstractCollection<java.lang.Object>[] objCollectionArray97 = weakConcurrentMap13.toArray(objCollectionArray94);
        java.util.AbstractCollection<java.lang.Object>[] objCollectionArray98 = weakConcurrentMap0.toArray(objCollectionArray94);
        java.lang.String str99 = org.mockito.internal.util.StringUtil.join((java.lang.Object[]) objCollectionArray98);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objIterable15);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objSpliterator22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(iOUtil30);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(weakConcurrentMap38);
        org.junit.Assert.assertNotNull(iOUtil47);
        org.junit.Assert.assertNotNull(objItor49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(weakConcurrentMap55);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objIterable62);
        org.junit.Assert.assertTrue("'" + cleaner65 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner65.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objIterable76);
        org.junit.Assert.assertTrue("'" + cleaner79 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner79.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objIterable85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertNotNull(abstractCollectionArray93);
        org.junit.Assert.assertNotNull(objCollectionArray94);
        org.junit.Assert.assertNotNull(objCollectionArray97);
        org.junit.Assert.assertNotNull(objCollectionArray98);
        org.junit.Assert.assertTrue("'" + str99 + "' != '" + "\n[]" + "'", str99.equals("\n[]"));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.String> strList7 = instanceFields5.names();
        java.util.List<java.lang.String> strList8 = instanceFields5.names();
        java.util.List<java.lang.Object> objList9 = instanceFields5.assignedValues();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(objList9);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap0.iterator();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor3);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger0 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        java.lang.reflect.AccessibleObject accessibleObject1 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject1);
        java.lang.reflect.AccessibleObject accessibleObject3 = null;
        try {
            accessibilityChanger0.enableAccess(accessibleObject3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = instanceFields6.notNull();
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList8 = instanceFields7.instanceFields();
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList9 = instanceFields7.instanceFields();
        java.lang.Class<?> wildcardClass10 = instanceFieldList9.getClass();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields7);
        org.junit.Assert.assertNotNull(instanceFieldList8);
        org.junit.Assert.assertNotNull(instanceFieldList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        java.lang.Object obj2 = defaultMockingDetails1.getMock();
        try {
            org.mockito.invocation.MockHandler mockHandler3 = defaultMockingDetails1.getMockHandler();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        int int11 = strWeakConcurrentSet1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = instanceFields6.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter8 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields9 = instanceFields6.filter(instanceFieldFilter8);
        java.util.List<java.lang.Object> objList10 = instanceFields6.assignedValues();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields7);
        org.junit.Assert.assertNotNull(instanceFields9);
        org.junit.Assert.assertNotNull(objList10);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        java.lang.reflect.Type[] typeArray4 = wildCardBoundedType1.interfaceBounds();
        try {
            java.lang.String str5 = wildCardBoundedType1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal7 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner4);
        java.lang.reflect.Field field8 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper13 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap9);
        java.util.Spliterator<java.lang.Object> objSpliterator14 = weakConcurrentMap9.spliterator();
        java.util.Spliterator<java.lang.Object> objSpliterator15 = weakConcurrentMap9.spliterator();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) cleaner4, field8, (java.lang.Object) objSpliterator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objSpliterator14);
        org.junit.Assert.assertNotNull(objSpliterator15);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean12 = weakConcurrentMap9.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        boolean boolean13 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap11);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable16 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap14, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap18 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner19 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj20 = cleanerEnumWeakConcurrentMap18.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner19);
        cleanerEnumWeakConcurrentMap18.expungeStaleEntries();
        boolean boolean22 = weakConcurrentMap14.add((java.lang.Object) cleanerEnumWeakConcurrentMap18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap23 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable25 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap23, "");
        boolean boolean26 = weakConcurrentMap14.equals((java.lang.Object) weakConcurrentMap23);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter27 = null;
        java.util.LinkedList<java.lang.Object> objList28 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap23, objFilter27);
        boolean boolean29 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objList28);
        java.util.AbstractSequentialList<java.lang.Object> objList31 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.AbstractSequentialList<java.lang.Object>) objList28, "<[]>");
        try {
            java.lang.Object obj32 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objList28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objIterable16);
        org.junit.Assert.assertTrue("'" + cleaner19 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner19.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objList31);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj9 = fieldInitializationReport6.fieldInstance();
        java.lang.Object obj10 = fieldInitializationReport6.fieldInstance();
        java.lang.Object obj11 = fieldInitializationReport6.fieldInstance();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        java.io.File file1 = null;
        try {
            org.mockito.internal.util.io.IOUtil.writeText("class org.mockito.internal.util.concurrent.WeakConcurrentMap", file1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.base.MockitoException; message: Problems writing text to file: null");
        } catch (org.mockito.exceptions.base.MockitoException e) {
        }
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.util.Iterator<java.lang.String> strItor4 = strWeakConcurrentSet3.iterator();
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) strItor4, "class org.mockito.internal.util.concurrent.WeakConcurrentMap");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        try {
            org.mockito.invocation.MockHandler<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner> cleanerMockHandler4 = org.mockito.internal.util.MockUtil.getMockHandler(cleaner2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        strWeakConcurrentSet1.clear();
        strWeakConcurrentSet1.expungeStaleEntries();
        boolean boolean9 = strWeakConcurrentSet1.contains("[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner24 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner24 };
        java.util.LinkedHashSet<java.lang.Object> objSet26 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet26, objArray25);
        java.util.Spliterator<java.lang.Object> objSpliterator28 = objSet26.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap29 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet26);
        java.lang.Object obj30 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet26);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner54 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner54 };
        java.util.LinkedHashSet<java.lang.Object> objSet56 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet56, objArray55);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = objSet56.spliterator();
        java.lang.reflect.Field field59 = null;
        try {
            fieldCopier0.copyValue(objSet26, objSet56, field59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner24 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner24.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objSpliterator28);
        org.junit.Assert.assertNotNull(weakConcurrentMap29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short) 10 + "'", obj30.equals((short) 10));
        org.junit.Assert.assertTrue("'" + cleaner54 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner54.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objSpliterator58);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper28 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails30 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails33 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails30, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails35 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails33, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper36 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails35);
        java.lang.Object obj37 = null;
        boolean boolean38 = hashCodeAndEqualsMockWrapper36.equals(obj37);
        try {
            lenientCopyTool0.copyToMock(hashCodeAndEqualsMockWrapper28, hashCodeAndEqualsMockWrapper36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertNotNull(defaultMockingDetails33);
        org.junit.Assert.assertNotNull(defaultMockingDetails35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj14 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner13);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        boolean boolean17 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper18 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) boolean17);
        org.mockito.internal.util.MockNameImpl mockNameImpl20 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str21 = mockNameImpl20.toString();
        boolean boolean22 = mockNameImpl20.isDefault();
        boolean boolean23 = mockNameImpl20.isDefault();
        boolean boolean24 = hashCodeAndEqualsMockWrapper18.equals((java.lang.Object) mockNameImpl20);
        try {
            org.mockito.internal.util.MockUtil.maybeRedefineMockName((java.lang.Object) boolean24, "[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper18);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        java.lang.Object obj4 = fieldInitializationReport3.fieldInstance();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (short) 10 + "'", obj4.equals((short) 10));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool31 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable34 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap32, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap36 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner37 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj38 = cleanerEnumWeakConcurrentMap36.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner37);
        cleanerEnumWeakConcurrentMap36.expungeStaleEntries();
        boolean boolean40 = weakConcurrentMap32.add((java.lang.Object) cleanerEnumWeakConcurrentMap36);
        java.util.Spliterator<java.lang.Object> objSpliterator41 = weakConcurrentMap32.spliterator();
        java.lang.Object[] objArray42 = weakConcurrentMap32.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil45 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil46 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil49 = org.mockito.internal.util.Checks.checkNotNull(iOUtil46, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap50 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor51 = weakConcurrentMap50.iterator();
        boolean boolean53 = weakConcurrentMap50.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 1, 100.0f, listUtil45, "hi!", (byte) 1, 'a' };
        java.lang.String str56 = org.mockito.internal.util.StringUtil.join(objArray55);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap57 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray55);
        lenientCopyTool31.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap32, (java.util.Collection<java.lang.Object>) weakConcurrentMap57);
        java.lang.String str59 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool60 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap61 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable63 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap61, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap65 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner66 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj67 = cleanerEnumWeakConcurrentMap65.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner66);
        cleanerEnumWeakConcurrentMap65.expungeStaleEntries();
        boolean boolean69 = weakConcurrentMap61.add((java.lang.Object) cleanerEnumWeakConcurrentMap65);
        java.util.Spliterator<java.lang.Object> objSpliterator70 = weakConcurrentMap61.spliterator();
        java.lang.Object[] objArray71 = weakConcurrentMap61.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil74 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil75 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil78 = org.mockito.internal.util.Checks.checkNotNull(iOUtil75, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap79 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor80 = weakConcurrentMap79.iterator();
        boolean boolean82 = weakConcurrentMap79.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray84 = new java.lang.Object[] { 1, 100.0f, listUtil74, "hi!", (byte) 1, 'a' };
        java.lang.String str85 = org.mockito.internal.util.StringUtil.join(objArray84);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap86 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray84);
        lenientCopyTool60.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap61, (java.util.Collection<java.lang.Object>) weakConcurrentMap86);
        java.util.Spliterator<java.lang.Object> objSpliterator88 = weakConcurrentMap61.spliterator();
        boolean boolean89 = weakConcurrentMap32.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap61);
        boolean boolean90 = weakConcurrentMap28.equals((java.lang.Object) weakConcurrentMap32);
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objIterable34);
        org.junit.Assert.assertTrue("'" + cleaner37 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner37.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(iOUtil49);
        org.junit.Assert.assertNotNull(objItor51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(weakConcurrentMap57);
        org.junit.Assert.assertNotNull(objIterable63);
        org.junit.Assert.assertTrue("'" + cleaner66 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner66.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objSpliterator70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(iOUtil78);
        org.junit.Assert.assertNotNull(objItor80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(weakConcurrentMap86);
        org.junit.Assert.assertNotNull(objSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails9 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        java.lang.ref.Reference<? extends java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>> wildcardReference11 = cleanerEnumWeakConcurrentMap4.remove((long) 10);
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(wildcardReference11);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction47 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner48 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet49 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner48);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray50 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList51 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51, instanceFieldArray50);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields53 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet49, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap54 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap54, "hi!");
        int int57 = weakConcurrentMap56.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner58 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean59 = weakConcurrentMap56.contains((java.lang.Object) cleaner58);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter60 = null;
        java.util.LinkedList<java.lang.Object> objList61 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap56, objFilter60);
        java.util.AbstractSequentialList<java.lang.Object> objList62 = instanceFieldListWithInlinedExpunction47.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51, (java.util.AbstractSequentialList<java.lang.Object>) objList61);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray63 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList64 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64, instanceFieldArray63);
        java.util.AbstractSequentialList<java.lang.Object> objList66 = instanceFieldListWithInlinedExpunction47.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64);
        boolean boolean67 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails68 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) instanceFieldList64);
        try {
            org.mockito.invocation.MockHandler mockHandler69 = defaultMockingDetails68.getMockHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + cleaner48 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner48.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + cleaner58 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner58.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(objList62);
        org.junit.Assert.assertNotNull(instanceFieldArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper4 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        java.util.Spliterator<java.lang.Object> objSpliterator5 = weakConcurrentMap0.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream6 = weakConcurrentMap0.stream();
        java.util.stream.Stream<java.lang.Object> objStream8 = org.mockito.internal.util.Checks.checkNotNull(objStream6, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSpliterator5);
        org.junit.Assert.assertNotNull(objStream6);
        org.junit.Assert.assertNotNull(objStream8);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        java.lang.reflect.Field field0 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails10 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        try {
            org.mockito.internal.util.reflection.InstanceField instanceField12 = new org.mockito.internal.util.reflection.InstanceField(field0, (java.lang.Object) cleanerEnumWeakConcurrentMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.removeFirstLine("\n[]");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]" + "'", str1.equals("[]"));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        java.util.Spliterator<java.lang.Object> objSpliterator9 = weakConcurrentMap0.spliterator();
        java.lang.Object[] objArray10 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap11 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray10);
        try {
            org.mockito.internal.util.MockUtil.resetMock((java.util.Set<java.lang.Object>) weakConcurrentMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objSpliterator9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(weakConcurrentMap11);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper4 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        java.util.Spliterator<java.lang.Object> objSpliterator5 = weakConcurrentMap0.spliterator();
        java.lang.reflect.Field field6 = null;
        try {
            org.mockito.internal.util.reflection.FieldInitializer fieldInitializer7 = new org.mockito.internal.util.reflection.FieldInitializer((java.lang.Object) weakConcurrentMap0, field6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSpliterator5);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        int int3 = weakConcurrentMap2.size();
        java.util.stream.Stream<java.lang.Object> objStream4 = weakConcurrentMap2.stream();
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objStream4);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.mockito.internal.util.MockCreationValidator mockCreationValidator0 = new org.mockito.internal.util.MockCreationValidator();
        org.mockito.mock.SerializableMode serializableMode2 = null;
        mockCreationValidator0.validateConstructorUse(false, serializableMode2);
        org.mockito.mock.SerializableMode serializableMode5 = null;
        mockCreationValidator0.validateConstructorUse(false, serializableMode5);
        org.mockito.mock.SerializableMode serializableMode8 = null;
        mockCreationValidator0.validateConstructorUse(false, serializableMode8);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        weakConcurrentMap0.clear();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner27 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner27 };
        java.util.LinkedHashSet<java.lang.Object> objSet29 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet29, objArray28);
        java.util.Spliterator<java.lang.Object> objSpliterator31 = objSet29.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap32 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet29);
        boolean boolean33 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap32);
        java.util.Spliterator<java.lang.Object> objSpliterator34 = weakConcurrentMap32.spliterator();
        java.util.Iterator<java.lang.Object> objItor35 = weakConcurrentMap32.iterator();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + cleaner27 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner27.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objSpliterator31);
        org.junit.Assert.assertNotNull(weakConcurrentMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertNotNull(objItor35);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper26 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) mockNameDetachedThreadLocal9);
        org.mockito.internal.util.MockNameImpl mockNameImpl28 = new org.mockito.internal.util.MockNameImpl("");
        boolean boolean29 = mockNameImpl28.isDefault();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl28);
        mockNameDetachedThreadLocal9.clear();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper32 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper32);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer(0L);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        java.lang.Object obj0 = null;
        java.lang.reflect.Field field1 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter2 = new org.mockito.internal.util.reflection.BeanPropertySetter(obj0, field1);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap0.iterator();
        boolean boolean3 = weakConcurrentMap0.isEmpty();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable6 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap4, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner9 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj10 = cleanerEnumWeakConcurrentMap8.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner9);
        cleanerEnumWeakConcurrentMap8.expungeStaleEntries();
        boolean boolean12 = weakConcurrentMap4.add((java.lang.Object) cleanerEnumWeakConcurrentMap8);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable15 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap13, "");
        boolean boolean16 = weakConcurrentMap4.equals((java.lang.Object) weakConcurrentMap13);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap17 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap4);
        boolean boolean18 = weakConcurrentMap0.retainAll((java.util.Collection<java.lang.Object>) weakConcurrentMap4);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter19 = null;
        java.util.LinkedList<java.lang.Object> objList20 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap0, objFilter19);
        java.util.Spliterator<java.lang.Object> objSpliterator21 = weakConcurrentMap0.spliterator();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objIterable6);
        org.junit.Assert.assertTrue("'" + cleaner9 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner9.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNotNull(objSpliterator21);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport4 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, true);
        boolean boolean5 = fieldInitializationReport4.fieldWasInitialized();
        boolean boolean6 = fieldInitializationReport4.fieldWasInitialized();
        java.lang.Object obj7 = fieldInitializationReport4.fieldInstance();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner8 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet9 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner8);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray10 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList11 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11, instanceFieldArray10);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields13 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet9, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList11);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields14 = instanceFields13.notNull();
        java.util.List<java.lang.Object> objList15 = instanceFields14.assignedValues();
        boolean boolean16 = weakConcurrentMap0.removeAll((java.util.Collection<java.lang.Object>) objList15);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter17 = null;
        java.util.LinkedList<java.lang.Object> objList18 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap0, objFilter17);
        java.lang.reflect.Field field19 = null;
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport23 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        boolean boolean24 = fieldInitializationReport23.fieldWasInitialized();
        java.lang.Class<?> wildcardClass25 = fieldInitializationReport23.fieldClass();
        try {
            org.mockito.internal.util.reflection.FieldSetter.setField((java.lang.Object) objFilter17, field19, (java.lang.Object) fieldInitializationReport23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner8.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instanceFields14);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        boolean boolean46 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction47 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner48 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet49 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner48);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray50 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList51 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51, instanceFieldArray50);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields53 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet49, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap54 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap54, "hi!");
        int int57 = weakConcurrentMap56.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner58 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean59 = weakConcurrentMap56.contains((java.lang.Object) cleaner58);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter60 = null;
        java.util.LinkedList<java.lang.Object> objList61 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap56, objFilter60);
        java.util.AbstractSequentialList<java.lang.Object> objList62 = instanceFieldListWithInlinedExpunction47.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList51, (java.util.AbstractSequentialList<java.lang.Object>) objList61);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray63 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList64 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64, instanceFieldArray63);
        java.util.AbstractSequentialList<java.lang.Object> objList66 = instanceFieldListWithInlinedExpunction47.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64);
        boolean boolean67 = instanceFieldListWithInlinedExpunction1.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList64);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails68 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) instanceFieldList64);
        java.lang.Object obj69 = defaultMockingDetails68.getMock();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + cleaner48 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner48.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + cleaner58 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner58.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(objList62);
        org.junit.Assert.assertNotNull(instanceFieldArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.collections.IdentitySet identitySet1 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor3 = weakConcurrentMap2.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool7 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool4, lenientCopyTool5, lenientCopyTool6, lenientCopyTool7 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray9 = weakConcurrentMap2.toArray(lenientCopyToolArray8);
        java.lang.Object obj10 = null;
        boolean boolean11 = weakConcurrentMap2.remove(obj10);
        java.util.stream.Stream<java.lang.Object> objStream12 = weakConcurrentMap2.stream();
        boolean boolean13 = identitySet1.contains((java.lang.Object) weakConcurrentMap2);
        org.mockito.internal.util.collections.ListUtil listUtil16 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil17 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil20 = org.mockito.internal.util.Checks.checkNotNull(iOUtil17, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor22 = weakConcurrentMap21.iterator();
        boolean boolean24 = weakConcurrentMap21.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 1, 100.0f, listUtil16, "hi!", (byte) 1, 'a' };
        java.lang.String str27 = org.mockito.internal.util.StringUtil.join(objArray26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray26);
        boolean boolean29 = identitySet1.contains((java.lang.Object) objArray26);
        boolean boolean30 = identitySet0.contains((java.lang.Object) boolean29);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner33 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj34 = cleanerEnumWeakConcurrentMap32.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner33);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap36 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner37 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj38 = cleanerEnumWeakConcurrentMap36.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner37);
        boolean boolean39 = cleanerEnumWeakConcurrentMap32.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner37);
        int int40 = cleanerEnumWeakConcurrentMap32.approximateSize();
        boolean boolean41 = identitySet0.contains((java.lang.Object) cleanerEnumWeakConcurrentMap32);
        org.junit.Assert.assertNotNull(objItor3);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertNotNull(lenientCopyToolArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iOUtil20);
        org.junit.Assert.assertNotNull(objItor22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + cleaner37 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner37.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj1 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean2 = weakConcurrentMap0.equals(obj1);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner26 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner26 };
        java.util.LinkedHashSet<java.lang.Object> objSet28 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet28, objArray27);
        java.util.Spliterator<java.lang.Object> objSpliterator30 = objSet28.spliterator();
        java.lang.Object obj31 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet28);
        java.lang.reflect.Field field32 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter34 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet28, field32, true);
        boolean boolean35 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objSet28);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner36 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet37 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner36);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray38 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList39 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39, instanceFieldArray38);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields41 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet37, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields42 = instanceFields41.notNull();
        java.util.List<java.lang.Object> objList43 = instanceFields42.assignedValues();
        boolean boolean44 = weakConcurrentMap0.containsAll((java.util.Collection<java.lang.Object>) objList43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap46 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner47 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj48 = cleanerEnumWeakConcurrentMap46.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner47);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport51 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap46, false, false);
        java.lang.Class<?> wildcardClass52 = fieldInitializationReport51.fieldClass();
        boolean boolean53 = fieldInitializationReport51.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj54 = fieldInitializationReport51.fieldInstance();
        java.lang.Object obj55 = fieldInitializationReport51.fieldInstance();
        boolean boolean56 = weakConcurrentMap0.equals((java.lang.Object) fieldInitializationReport51);
        boolean boolean57 = weakConcurrentMap0.isEmpty();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + cleaner26 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner26.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short) 10 + "'", obj31.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instanceFields42);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + cleaner47 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner47.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper4 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) hashCodeAndEqualsMockWrapper4);
        boolean boolean7 = hashCodeAndEqualsMockWrapper5.equals((java.lang.Object) 18L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner54 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner54 };
        java.util.LinkedHashSet<java.lang.Object> objSet56 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet56, objArray55);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = objSet56.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet56);
        boolean boolean61 = weakConcurrentMap59.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap62 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap64 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap62, "hi!");
        int int65 = weakConcurrentMap64.size();
        java.util.Spliterator<java.lang.Object> objSpliterator66 = weakConcurrentMap64.spliterator();
        boolean boolean67 = weakConcurrentMap59.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap64);
        boolean boolean68 = weakConcurrentMap28.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap69 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor70 = weakConcurrentMap69.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool71 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool72 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool73 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool74 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray75 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool71, lenientCopyTool72, lenientCopyTool73, lenientCopyTool74 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray76 = weakConcurrentMap69.toArray(lenientCopyToolArray75);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner77 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet78 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner77);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray79 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList80 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList80, instanceFieldArray79);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields82 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet78, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList80);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields83 = instanceFields82.notNull();
        java.util.List<java.lang.Object> objList84 = instanceFields83.assignedValues();
        boolean boolean85 = weakConcurrentMap69.removeAll((java.util.Collection<java.lang.Object>) objList84);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter86 = null;
        java.util.LinkedList<java.lang.Object> objList87 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap69, objFilter86);
        boolean boolean88 = weakConcurrentMap59.removeAll((java.util.Collection<java.lang.Object>) objList87);
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + cleaner54 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner54.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(weakConcurrentMap64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objItor70);
        org.junit.Assert.assertNotNull(lenientCopyToolArray75);
        org.junit.Assert.assertNotNull(lenientCopyToolArray76);
        org.junit.Assert.assertTrue("'" + cleaner77 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner77.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instanceFields83);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        java.lang.Class<?> wildcardClass8 = fieldInitializationReport6.fieldClass();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper9 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) fieldInitializationReport6);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean29 = weakConcurrentMap28.isEmpty();
        int int30 = weakConcurrentMap28.size();
        java.util.stream.Stream<java.lang.Object> objStream31 = weakConcurrentMap28.stream();
        try {
            java.lang.String str32 = weakConcurrentMap28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
        org.junit.Assert.assertNotNull(objStream31);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.mockito.internal.util.MockNameImpl mockNameImpl1 = new org.mockito.internal.util.MockNameImpl("\n[]");
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj29 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean30 = weakConcurrentMap28.equals(obj29);
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap28.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool33 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap34 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable36 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap34, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        cleanerEnumWeakConcurrentMap38.expungeStaleEntries();
        boolean boolean42 = weakConcurrentMap34.add((java.lang.Object) cleanerEnumWeakConcurrentMap38);
        java.util.Spliterator<java.lang.Object> objSpliterator43 = weakConcurrentMap34.spliterator();
        java.lang.Object[] objArray44 = weakConcurrentMap34.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil47 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil51 = org.mockito.internal.util.Checks.checkNotNull(iOUtil48, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor53 = weakConcurrentMap52.iterator();
        boolean boolean55 = weakConcurrentMap52.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 1, 100.0f, listUtil47, "hi!", (byte) 1, 'a' };
        java.lang.String str58 = org.mockito.internal.util.StringUtil.join(objArray57);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray57);
        lenientCopyTool33.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap34, (java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        java.lang.String str61 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean62 = weakConcurrentMap28.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean63 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap64 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor65 = weakConcurrentMap64.iterator();
        java.util.Iterator<java.lang.Object> objItor66 = weakConcurrentMap64.iterator();
        weakConcurrentMap64.clear();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner91 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner91 };
        java.util.LinkedHashSet<java.lang.Object> objSet93 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet93, objArray92);
        java.util.Spliterator<java.lang.Object> objSpliterator95 = objSet93.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap96 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet93);
        boolean boolean97 = weakConcurrentMap64.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap96);
        boolean boolean98 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap96);
        java.util.Iterator<java.lang.Object> objItor99 = weakConcurrentMap96.iterator();
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(objIterable36);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objSpliterator43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(iOUtil51);
        org.junit.Assert.assertNotNull(objItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objItor65);
        org.junit.Assert.assertNotNull(objItor66);
        org.junit.Assert.assertTrue("'" + cleaner91 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner91.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(objSpliterator95);
        org.junit.Assert.assertNotNull(weakConcurrentMap96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(objItor99);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        try {
            java.lang.String str4 = wildCardBoundedType1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        boolean boolean7 = instanceFieldListWithInlinedExpunction0.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        int int8 = instanceFieldListWithInlinedExpunction0.approximateSize();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool9 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction10 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner11 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet12 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner11);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray13 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList14 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14, instanceFieldArray13);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields16 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet12, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap17, "hi!");
        int int20 = weakConcurrentMap19.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner21 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) cleaner21);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter23 = null;
        java.util.LinkedList<java.lang.Object> objList24 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap19, objFilter23);
        java.util.AbstractSequentialList<java.lang.Object> objList25 = instanceFieldListWithInlinedExpunction10.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList14, (java.util.AbstractSequentialList<java.lang.Object>) objList24);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        java.util.AbstractSequentialList<java.lang.Object> objList29 = instanceFieldListWithInlinedExpunction10.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction30 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray31 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList32 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList32, instanceFieldArray31);
        boolean boolean34 = instanceFieldListWithInlinedExpunction30.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList32);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        boolean boolean38 = instanceFieldListWithInlinedExpunction30.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        lenientCopyTool9.copyToRealObject(instanceFieldListWithInlinedExpunction10, instanceFieldListWithInlinedExpunction30);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray40 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList41 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41, instanceFieldArray40);
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList44 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41, "class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        java.util.AbstractSequentialList<java.lang.Object> objList45 = instanceFieldListWithInlinedExpunction30.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList41);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction46 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray47 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList48 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList48, instanceFieldArray47);
        boolean boolean50 = instanceFieldListWithInlinedExpunction46.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList48);
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner51 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet52 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner51);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray53 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList54 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54, instanceFieldArray53);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields56 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet52, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        boolean boolean57 = instanceFieldListWithInlinedExpunction46.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap58 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable60 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap58, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap62 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner63 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj64 = cleanerEnumWeakConcurrentMap62.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner63);
        cleanerEnumWeakConcurrentMap62.expungeStaleEntries();
        boolean boolean66 = weakConcurrentMap58.add((java.lang.Object) cleanerEnumWeakConcurrentMap62);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap67 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap69 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean70 = weakConcurrentMap67.add((java.lang.Object) cleanerEnumWeakConcurrentMap69);
        boolean boolean71 = weakConcurrentMap58.add((java.lang.Object) cleanerEnumWeakConcurrentMap69);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap72 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable74 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap72, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap76 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner77 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj78 = cleanerEnumWeakConcurrentMap76.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner77);
        cleanerEnumWeakConcurrentMap76.expungeStaleEntries();
        boolean boolean80 = weakConcurrentMap72.add((java.lang.Object) cleanerEnumWeakConcurrentMap76);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap81 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable83 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap81, "");
        boolean boolean84 = weakConcurrentMap72.equals((java.lang.Object) weakConcurrentMap81);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter85 = null;
        java.util.LinkedList<java.lang.Object> objList86 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap81, objFilter85);
        boolean boolean87 = weakConcurrentMap58.containsAll((java.util.Collection<java.lang.Object>) objList86);
        java.util.AbstractSequentialList<java.lang.Object> objList88 = instanceFieldListWithInlinedExpunction30.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54, (java.util.AbstractSequentialList<java.lang.Object>) objList86);
        boolean boolean89 = instanceFieldListWithInlinedExpunction0.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + cleaner21 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner21.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(objList25);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(objList29);
        org.junit.Assert.assertNotNull(instanceFieldArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instanceFieldList44);
        org.junit.Assert.assertNull(objList45);
        org.junit.Assert.assertNotNull(instanceFieldArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + cleaner51 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner51.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objIterable60);
        org.junit.Assert.assertTrue("'" + cleaner63 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner63.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objIterable74);
        org.junit.Assert.assertTrue("'" + cleaner77 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner77.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objIterable83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(objList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((long) (byte) 10);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner12);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport16 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap11, false, false);
        java.lang.Class<?> wildcardClass17 = fieldInitializationReport16.fieldClass();
        boolean boolean18 = fieldInitializationReport16.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj19 = fieldInitializationReport16.fieldInstance();
        boolean boolean20 = wildCardBoundedType1.equals((java.lang.Object) fieldInitializationReport16);
        java.lang.reflect.WildcardType wildcardType21 = wildCardBoundedType1.wildCard();
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardType21);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.mock.MockName mockName11 = mockNameDetachedThreadLocal9.get();
        org.mockito.mock.MockName mockName12 = mockNameDetachedThreadLocal9.get();
        org.mockito.mock.MockName mockName13 = mockNameDetachedThreadLocal9.get();
        mockNameDetachedThreadLocal9.clearAll();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertNull(mockName11);
        org.junit.Assert.assertNull(mockName12);
        org.junit.Assert.assertNull(mockName13);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        int int8 = weakConcurrentMap0.size();
        java.lang.Object[] objArray9 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable12 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap10, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        cleanerEnumWeakConcurrentMap14.expungeStaleEntries();
        boolean boolean18 = weakConcurrentMap10.add((java.lang.Object) cleanerEnumWeakConcurrentMap14);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable21 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap19, "");
        boolean boolean22 = weakConcurrentMap10.equals((java.lang.Object) weakConcurrentMap19);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter23 = null;
        java.util.LinkedList<java.lang.Object> objList24 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap19, objFilter23);
        boolean boolean25 = weakConcurrentMap0.remove((java.lang.Object) objList24);
        java.lang.reflect.Field field26 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter28 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) weakConcurrentMap0, field26, false);
        java.lang.Object[] objArray29 = weakConcurrentMap0.toArray();
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objIterable12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray29);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails2 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails5 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails2, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails5, "hi!");
        identitySet0.add((java.lang.Object) defaultMockingDetails7);
        try {
            boolean boolean9 = defaultMockingDetails7.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails5);
        org.junit.Assert.assertNotNull(defaultMockingDetails7);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails2 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails5 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails2, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails5, "hi!");
        identitySet0.add((java.lang.Object) defaultMockingDetails7);
        java.lang.reflect.Field field9 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter11 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) identitySet0, field9, true);
        org.junit.Assert.assertNotNull(defaultMockingDetails5);
        org.junit.Assert.assertNotNull(defaultMockingDetails7);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) (short) 10, false, false);
        boolean boolean4 = fieldInitializationReport3.fieldWasInitialized();
        boolean boolean5 = fieldInitializationReport3.fieldWasInitializedUsingContructorArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        boolean boolean8 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap1.expungeStaleEntries();
        int int10 = cleanerEnumWeakConcurrentMap1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        strWeakConcurrentSet1.clear();
        java.util.Iterator<java.lang.String> strItor7 = strWeakConcurrentSet1.iterator();
        boolean boolean9 = strWeakConcurrentSet1.add("[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.mockito.internal.util.Timer timer1 = new org.mockito.internal.util.Timer((long) 18);
        boolean boolean2 = timer1.isCounting();
        long long3 = timer1.duration();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 18L + "'", long3 == 18L);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails2 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails5 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails2, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails7 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails5, "hi!");
        identitySet0.add((java.lang.Object) defaultMockingDetails7);
        try {
            org.mockito.mock.MockCreationSettings<?> wildcardMockCreationSettings9 = defaultMockingDetails7.getMockCreationSettings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails5);
        org.junit.Assert.assertNotNull(defaultMockingDetails7);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport4 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, true);
        boolean boolean5 = fieldInitializationReport4.fieldWasInitialized();
        boolean boolean6 = fieldInitializationReport4.fieldWasInitialized();
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport8 = org.mockito.internal.util.Checks.checkNotNull(fieldInitializationReport4, "<hi!>");
        java.lang.Object obj9 = fieldInitializationReport4.fieldInstance();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fieldInitializationReport8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable6 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap4, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner9 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj10 = cleanerEnumWeakConcurrentMap8.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner9);
        cleanerEnumWeakConcurrentMap8.expungeStaleEntries();
        boolean boolean12 = weakConcurrentMap4.add((java.lang.Object) cleanerEnumWeakConcurrentMap8);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap15 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean16 = weakConcurrentMap13.add((java.lang.Object) cleanerEnumWeakConcurrentMap15);
        boolean boolean17 = weakConcurrentMap4.add((java.lang.Object) cleanerEnumWeakConcurrentMap15);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap18 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable20 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap18, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap22 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj24 = cleanerEnumWeakConcurrentMap22.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner23);
        cleanerEnumWeakConcurrentMap22.expungeStaleEntries();
        boolean boolean26 = weakConcurrentMap18.add((java.lang.Object) cleanerEnumWeakConcurrentMap22);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable29 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap27, "");
        boolean boolean30 = weakConcurrentMap18.equals((java.lang.Object) weakConcurrentMap27);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter31 = null;
        java.util.LinkedList<java.lang.Object> objList32 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap27, objFilter31);
        boolean boolean33 = weakConcurrentMap4.containsAll((java.util.Collection<java.lang.Object>) objList32);
        boolean boolean34 = wildCardBoundedType1.equals((java.lang.Object) boolean33);
        try {
            java.lang.String str35 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(objIterable6);
        org.junit.Assert.assertTrue("'" + cleaner9 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner9.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objIterable20);
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.AutoCloseable, java.lang.Thread> autoCloseableWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.AutoCloseable, java.lang.Thread>(false);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        java.util.stream.Stream<java.lang.Object> objStream10 = weakConcurrentMap0.stream();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper11 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objStream10);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool31 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap39 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap41 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap39, "hi!");
        int int42 = weakConcurrentMap41.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner43 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean44 = weakConcurrentMap41.contains((java.lang.Object) cleaner43);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter45 = null;
        java.util.LinkedList<java.lang.Object> objList46 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap41, objFilter45);
        java.util.AbstractSequentialList<java.lang.Object> objList47 = instanceFieldListWithInlinedExpunction32.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, (java.util.AbstractSequentialList<java.lang.Object>) objList46);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray48 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList49 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList49, instanceFieldArray48);
        java.util.AbstractSequentialList<java.lang.Object> objList51 = instanceFieldListWithInlinedExpunction32.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList49);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray53 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList54 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54, instanceFieldArray53);
        boolean boolean56 = instanceFieldListWithInlinedExpunction52.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList54);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray57 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList58 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList58, instanceFieldArray57);
        boolean boolean60 = instanceFieldListWithInlinedExpunction52.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList58);
        lenientCopyTool31.copyToRealObject(instanceFieldListWithInlinedExpunction32, instanceFieldListWithInlinedExpunction52);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray62 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList63 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList63, instanceFieldArray62);
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList66 = org.mockito.internal.util.Checks.checkItemsNotNull((java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList63, "class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        java.util.AbstractSequentialList<java.lang.Object> objList67 = instanceFieldListWithInlinedExpunction52.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList63);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap69 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner70 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj71 = cleanerEnumWeakConcurrentMap69.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner70);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport74 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap69, false, false);
        java.lang.Class<?> wildcardClass75 = fieldInitializationReport74.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap77 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner78 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj79 = cleanerEnumWeakConcurrentMap77.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner78);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport82 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap77, false, false);
        java.lang.Class<?> wildcardClass83 = fieldInitializationReport82.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap85 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner86 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj87 = cleanerEnumWeakConcurrentMap85.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner86);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport90 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap85, false, false);
        java.lang.Class<?> wildcardClass91 = fieldInitializationReport90.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray92 = new java.lang.reflect.GenericDeclaration[] { wildcardClass75, wildcardClass83, wildcardClass91 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray95 = org.mockito.internal.util.Checks.checkNotNull(genericDeclarationArray92, "class org.mockito.internal.util.concurrent.WeakConcurrentMap", "hi!");
        lenientCopyTool0.copyToRealObject((java.lang.Cloneable) instanceFieldList63, (java.lang.Cloneable) genericDeclarationArray95);
        java.lang.Class<?> wildcardClass97 = lenientCopyTool0.getClass();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + cleaner43 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner43.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(objList47);
        org.junit.Assert.assertNotNull(instanceFieldArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(objList51);
        org.junit.Assert.assertNotNull(instanceFieldArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(instanceFieldList66);
        org.junit.Assert.assertNull(objList67);
        org.junit.Assert.assertTrue("'" + cleaner70 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner70.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + cleaner78 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner78.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + cleaner86 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner86.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(genericDeclarationArray92);
        org.junit.Assert.assertNotNull(genericDeclarationArray95);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.mockito.internal.util.MockNameImpl mockNameImpl1 = new org.mockito.internal.util.MockNameImpl("<<custom argument matcher><[]>null>");
        java.lang.String str2 = mockNameImpl1.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "<<custom argument matcher><[]>null>" + "'", str2.equals("<<custom argument matcher><[]>null>"));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        int int9 = cleanerEnumWeakConcurrentMap1.approximateSize();
        java.lang.Thread thread10 = cleanerEnumWeakConcurrentMap1.getCleanerThread();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner13 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj14 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner13);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        boolean boolean17 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper18 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) boolean17);
        org.mockito.internal.util.MockNameImpl mockNameImpl20 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str21 = mockNameImpl20.toString();
        boolean boolean22 = mockNameImpl20.isDefault();
        boolean boolean23 = mockNameImpl20.isDefault();
        boolean boolean24 = hashCodeAndEqualsMockWrapper18.equals((java.lang.Object) mockNameImpl20);
        boolean boolean25 = mockNameImpl20.isDefault();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(thread10);
        org.junit.Assert.assertTrue("'" + cleaner13 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner13.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper18);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap0, "hi!");
        int int3 = weakConcurrentMap2.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean5 = weakConcurrentMap2.contains((java.lang.Object) cleaner4);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter6 = null;
        java.util.LinkedList<java.lang.Object> objList7 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap2, objFilter6);
        java.util.AbstractSequentialList<java.lang.Object> objList10 = org.mockito.internal.util.Checks.checkNotNull((java.util.AbstractSequentialList<java.lang.Object>) objList7, "class org.mockito.internal.util.concurrent.WeakConcurrentMap", "<[]>");
        try {
            java.lang.Object obj11 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objList7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot provide 1st element from empty iterable: []");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(weakConcurrentMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(objList10);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap2.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap2.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal10 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner8);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        java.lang.Object obj17 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal20 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner18);
        org.mockito.internal.util.MockNameImpl mockNameImpl22 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal20.set((org.mockito.mock.MockName) mockNameImpl22);
        mockNameDetachedThreadLocal10.set((org.mockito.mock.MockName) mockNameImpl22);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal10.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap26 = mockNameDetachedThreadLocal10.getBackingMap();
        boolean boolean27 = identitySet0.contains((java.lang.Object) mockNameDetachedThreadLocal10);
        mockNameDetachedThreadLocal10.clearAll();
        java.lang.Thread thread29 = null;
        org.mockito.internal.util.MockNameImpl mockNameImpl31 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str32 = mockNameImpl31.toString();
        boolean boolean33 = mockNameImpl31.isDefault();
        boolean boolean34 = mockNameImpl31.isDefault();
        try {
            mockNameDetachedThreadLocal10.define(thread29, (org.mockito.mock.MockName) mockNameImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool1 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable4 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap2, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap6 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap6.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        cleanerEnumWeakConcurrentMap6.expungeStaleEntries();
        boolean boolean10 = weakConcurrentMap2.add((java.lang.Object) cleanerEnumWeakConcurrentMap6);
        java.util.Spliterator<java.lang.Object> objSpliterator11 = weakConcurrentMap2.spliterator();
        java.lang.Object[] objArray12 = weakConcurrentMap2.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        lenientCopyTool1.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap2, (java.util.Collection<java.lang.Object>) weakConcurrentMap27);
        java.lang.String str29 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap2);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool30 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap31 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable33 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap31, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap35 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner36 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj37 = cleanerEnumWeakConcurrentMap35.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner36);
        cleanerEnumWeakConcurrentMap35.expungeStaleEntries();
        boolean boolean39 = weakConcurrentMap31.add((java.lang.Object) cleanerEnumWeakConcurrentMap35);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = weakConcurrentMap31.spliterator();
        java.lang.Object[] objArray41 = weakConcurrentMap31.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil44 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil45 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = org.mockito.internal.util.Checks.checkNotNull(iOUtil45, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap49 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap49.iterator();
        boolean boolean52 = weakConcurrentMap49.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1, 100.0f, listUtil44, "hi!", (byte) 1, 'a' };
        java.lang.String str55 = org.mockito.internal.util.StringUtil.join(objArray54);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap56 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray54);
        lenientCopyTool30.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap31, (java.util.Collection<java.lang.Object>) weakConcurrentMap56);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = weakConcurrentMap31.spliterator();
        boolean boolean59 = weakConcurrentMap2.addAll((java.util.Collection<java.lang.Object>) weakConcurrentMap31);
        weakConcurrentMap2.clear();
        java.util.Spliterator<java.lang.Object> objSpliterator61 = weakConcurrentMap2.spliterator();
        org.junit.Assert.assertNotNull(objIterable4);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(objIterable33);
        org.junit.Assert.assertTrue("'" + cleaner36 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner36.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(iOUtil48);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(weakConcurrentMap56);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objSpliterator61);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        java.lang.Object obj29 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) weakConcurrentMap28);
        java.lang.reflect.Field field30 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter31 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) weakConcurrentMap28, field30);
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short) 10 + "'", obj29.equals((short) 10));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        java.lang.Object obj0 = null;
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl1 = org.mockito.internal.util.MockUtil.getInvocationContainer(obj0);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner12);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport16 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap11, false, false);
        java.lang.Class<?> wildcardClass17 = fieldInitializationReport16.fieldClass();
        boolean boolean18 = fieldInitializationReport16.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj19 = fieldInitializationReport16.fieldInstance();
        boolean boolean20 = wildCardBoundedType1.equals((java.lang.Object) fieldInitializationReport16);
        try {
            java.lang.String str21 = wildCardBoundedType1.getTypeName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        boolean boolean2 = defaultMockingDetails1.isSpy();
        boolean boolean3 = defaultMockingDetails1.isSpy();
        try {
            java.lang.String str4 = defaultMockingDetails1.printInvocations();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner2 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray4 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList5 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, instanceFieldArray4);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields7 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet3, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap8, "hi!");
        int int11 = weakConcurrentMap10.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean13 = weakConcurrentMap10.contains((java.lang.Object) cleaner12);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter14 = null;
        java.util.LinkedList<java.lang.Object> objList15 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap10, objFilter14);
        java.util.AbstractSequentialList<java.lang.Object> objList16 = instanceFieldListWithInlinedExpunction1.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList5, (java.util.AbstractSequentialList<java.lang.Object>) objList15);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray17 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList18 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18, instanceFieldArray17);
        java.util.AbstractSequentialList<java.lang.Object> objList20 = instanceFieldListWithInlinedExpunction1.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList18);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray22 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList23 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23, instanceFieldArray22);
        boolean boolean25 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList23);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray26 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList27 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27, instanceFieldArray26);
        boolean boolean29 = instanceFieldListWithInlinedExpunction21.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList27);
        lenientCopyTool0.copyToRealObject(instanceFieldListWithInlinedExpunction1, instanceFieldListWithInlinedExpunction21);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor31 = instanceFieldListWithInlinedExpunction1.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction32 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner33 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet34 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner33);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray35 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList36 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36, instanceFieldArray35);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields38 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet34, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        boolean boolean39 = instanceFieldListWithInlinedExpunction32.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        java.util.AbstractSequentialList<java.lang.Object> objList40 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList36);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction41 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction41.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray46 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList47 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList47, instanceFieldArray46);
        java.util.AbstractSequentialList<java.lang.Object> objList49 = instanceFieldListWithInlinedExpunction41.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList47);
        java.util.AbstractSequentialList<java.lang.Object> objList50 = instanceFieldListWithInlinedExpunction1.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList47);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(objList16);
        org.junit.Assert.assertNotNull(instanceFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(objList20);
        org.junit.Assert.assertNotNull(instanceFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor31);
        org.junit.Assert.assertTrue("'" + cleaner33 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner33.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(objList40);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(objList49);
        org.junit.Assert.assertNull(objList50);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport4 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, true);
        boolean boolean5 = fieldInitializationReport4.fieldWasInitialized();
        boolean boolean6 = fieldInitializationReport4.fieldWasInitialized();
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport8 = org.mockito.internal.util.Checks.checkNotNull(fieldInitializationReport4, "<hi!>");
        try {
            org.mockito.internal.stubbing.InvocationContainerImpl invocationContainerImpl9 = org.mockito.internal.util.MockUtil.getInvocationContainer((java.lang.Object) "<hi!>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fieldInitializationReport8);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.mockito.internal.util.Primitives primitives0 = new org.mockito.internal.util.Primitives();
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport3 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) primitives0, false, false);
        boolean boolean4 = fieldInitializationReport3.fieldWasInitialized();
        boolean boolean5 = fieldInitializationReport3.fieldWasInitialized();
        boolean boolean6 = fieldInitializationReport3.fieldWasInitializedUsingContructorArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        int int8 = weakConcurrentMap0.size();
        java.lang.Object[] objArray9 = weakConcurrentMap0.toArray();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap10 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable12 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap10, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        cleanerEnumWeakConcurrentMap14.expungeStaleEntries();
        boolean boolean18 = weakConcurrentMap10.add((java.lang.Object) cleanerEnumWeakConcurrentMap14);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable21 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap19, "");
        boolean boolean22 = weakConcurrentMap10.equals((java.lang.Object) weakConcurrentMap19);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter23 = null;
        java.util.LinkedList<java.lang.Object> objList24 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap19, objFilter23);
        boolean boolean25 = weakConcurrentMap0.remove((java.lang.Object) objList24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objIterable12);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable2 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        cleanerEnumWeakConcurrentMap4.expungeStaleEntries();
        boolean boolean8 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable11 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap9, "");
        boolean boolean12 = weakConcurrentMap0.equals((java.lang.Object) weakConcurrentMap9);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap13 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) weakConcurrentMap0);
        boolean boolean14 = weakConcurrentMap13.isEmpty();
        org.junit.Assert.assertNotNull(objIterable2);
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitializedUsingContructorArgs();
        java.lang.Class<?> wildcardClass9 = fieldInitializationReport6.fieldClass();
        try {
            org.mockito.internal.util.MockUtil.resetMock(wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable5 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap3, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap7.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        cleanerEnumWeakConcurrentMap7.expungeStaleEntries();
        boolean boolean11 = weakConcurrentMap3.add((java.lang.Object) cleanerEnumWeakConcurrentMap7);
        java.util.Spliterator<java.lang.Object> objSpliterator12 = weakConcurrentMap3.spliterator();
        java.lang.Object[] objArray13 = weakConcurrentMap3.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil16 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil17 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil20 = org.mockito.internal.util.Checks.checkNotNull(iOUtil17, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap21 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor22 = weakConcurrentMap21.iterator();
        boolean boolean24 = weakConcurrentMap21.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 1, 100.0f, listUtil16, "hi!", (byte) 1, 'a' };
        java.lang.String str27 = org.mockito.internal.util.StringUtil.join(objArray26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray26);
        lenientCopyTool2.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap3, (java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        java.lang.String str30 = org.mockito.internal.util.StringUtil.join("class org.mockito.internal.util.concurrent.WeakConcurrentMap", "", (java.util.Collection<java.lang.Object>) weakConcurrentMap3);
        org.mockito.internal.util.collections.ListUtil listUtil33 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil34 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil37 = org.mockito.internal.util.Checks.checkNotNull(iOUtil34, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor39 = weakConcurrentMap38.iterator();
        boolean boolean41 = weakConcurrentMap38.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 1, 100.0f, listUtil33, "hi!", (byte) 1, 'a' };
        java.lang.String str44 = org.mockito.internal.util.StringUtil.join(objArray43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap45 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray43);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap46 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray43);
        boolean boolean47 = weakConcurrentMap3.retainAll((java.util.Collection<java.lang.Object>) weakConcurrentMap46);
        boolean boolean49 = weakConcurrentMap3.remove((java.lang.Object) 1.0d);
        java.util.Iterator<java.lang.Object> objItor50 = weakConcurrentMap3.iterator();
        org.junit.Assert.assertNotNull(objIterable5);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objSpliterator12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(iOUtil20);
        org.junit.Assert.assertNotNull(objItor22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertNotNull(iOUtil37);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(weakConcurrentMap45);
        org.junit.Assert.assertNotNull(weakConcurrentMap46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objItor50);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.mockito.internal.util.ConsoleMockitoLogger consoleMockitoLogger0 = new org.mockito.internal.util.ConsoleMockitoLogger();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean4 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap3);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap1);
        java.util.Spliterator<java.lang.Object> objSpliterator6 = weakConcurrentMap1.spliterator();
        consoleMockitoLogger0.log((java.lang.Object) objSpliterator6);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap8 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor9 = weakConcurrentMap8.iterator();
        java.util.Iterator<java.lang.Object> objItor10 = weakConcurrentMap8.iterator();
        consoleMockitoLogger0.log((java.lang.Object) weakConcurrentMap8);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objSpliterator6);
        org.junit.Assert.assertNotNull(objItor9);
        org.junit.Assert.assertNotNull(objItor10);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        cleanerEnumWeakConcurrentMap1.expungeStaleEntries();
        cleanerEnumWeakConcurrentMap1.expungeStaleEntries();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.Object> objList7 = instanceFields6.assignedValues();
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields6.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter9 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields10 = instanceFields6.filter(instanceFieldFilter9);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields11 = instanceFields6.notNull();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(instanceFields10);
        org.junit.Assert.assertNotNull(instanceFields11);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        try {
            org.mockito.mock.MockCreationSettings mockCreationSettings6 = org.mockito.internal.util.MockUtil.getMockSettings(obj5);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        java.io.File file1 = null;
        try {
            org.mockito.internal.util.io.IOUtil.writeText("\n[]", file1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.base.MockitoException; message: Problems writing text to file: null");
        } catch (org.mockito.exceptions.base.MockitoException e) {
        }
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.util.Iterator<java.lang.String> strItor4 = strWeakConcurrentSet3.iterator();
        int int5 = strWeakConcurrentSet3.approximateSize();
        boolean boolean7 = strWeakConcurrentSet3.add("<[]>");
        strWeakConcurrentSet3.expungeStaleEntries();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        boolean boolean8 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner9 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL;
        boolean boolean10 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner9);
        cleanerEnumWeakConcurrentMap1.expungeStaleEntries();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + cleaner9 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL + "'", cleaner9.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.MANUAL));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray1 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList2 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList2, instanceFieldArray1);
        boolean boolean4 = instanceFieldListWithInlinedExpunction0.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList2);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray5 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList6 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList6, instanceFieldArray5);
        java.util.AbstractSequentialList<java.lang.Object> objList8 = instanceFieldListWithInlinedExpunction0.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList6);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor9 = instanceFieldListWithInlinedExpunction0.iterator();
        org.junit.Assert.assertNotNull(instanceFieldArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(objList8);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor9);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        strWeakConcurrentSet1.expungeStaleEntries();
        java.util.Iterator<java.lang.String> strItor12 = strWeakConcurrentSet1.iterator();
        java.util.Iterator<java.lang.String> strItor13 = strWeakConcurrentSet1.iterator();
        java.util.Iterator<java.lang.String> strItor14 = strWeakConcurrentSet1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor1 = weakConcurrentMap0.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool2 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray6 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool2, lenientCopyTool3, lenientCopyTool4, lenientCopyTool5 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = weakConcurrentMap0.toArray(lenientCopyToolArray6);
        java.lang.Object obj8 = null;
        boolean boolean9 = weakConcurrentMap0.remove(obj8);
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper10 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) weakConcurrentMap0);
        org.junit.Assert.assertNotNull(objItor1);
        org.junit.Assert.assertNotNull(lenientCopyToolArray6);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor2 = weakConcurrentMap1.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool3 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool4 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool5 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool6 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray7 = new org.mockito.internal.util.reflection.LenientCopyTool[] { lenientCopyTool3, lenientCopyTool4, lenientCopyTool5, lenientCopyTool6 };
        org.mockito.internal.util.reflection.LenientCopyTool[] lenientCopyToolArray8 = weakConcurrentMap1.toArray(lenientCopyToolArray7);
        java.lang.Object obj9 = null;
        boolean boolean10 = weakConcurrentMap1.remove(obj9);
        java.util.stream.Stream<java.lang.Object> objStream11 = weakConcurrentMap1.stream();
        boolean boolean12 = identitySet0.contains((java.lang.Object) weakConcurrentMap1);
        org.mockito.internal.util.collections.ListUtil listUtil15 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil16 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil19 = org.mockito.internal.util.Checks.checkNotNull(iOUtil16, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap20 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor21 = weakConcurrentMap20.iterator();
        boolean boolean23 = weakConcurrentMap20.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1, 100.0f, listUtil15, "hi!", (byte) 1, 'a' };
        java.lang.String str26 = org.mockito.internal.util.StringUtil.join(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap27 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray25);
        identitySet0.add((java.lang.Object) weakConcurrentMap28);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap30 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap30.iterator();
        boolean boolean33 = weakConcurrentMap30.contains((java.lang.Object) (byte) 1);
        java.util.Spliterator<java.lang.Object> objSpliterator34 = weakConcurrentMap30.spliterator();
        java.lang.Object[] objArray35 = weakConcurrentMap30.toArray();
        java.util.Iterator<java.lang.Object> objItor36 = weakConcurrentMap30.iterator();
        boolean boolean37 = identitySet0.contains((java.lang.Object) objItor36);
        org.junit.Assert.assertNotNull(objItor2);
        org.junit.Assert.assertNotNull(lenientCopyToolArray7);
        org.junit.Assert.assertNotNull(lenientCopyToolArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iOUtil19);
        org.junit.Assert.assertNotNull(objItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(weakConcurrentMap27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner10 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj11 = cleanerEnumWeakConcurrentMap9.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner10);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport14 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap9, false, false);
        java.lang.Class<?> wildcardClass15 = fieldInitializationReport14.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap17.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport22 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap17, false, false);
        java.lang.Class<?> wildcardClass23 = fieldInitializationReport22.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray24 = new java.lang.reflect.GenericDeclaration[] { wildcardClass7, wildcardClass15, wildcardClass23 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray27 = org.mockito.internal.util.Checks.checkNotNull(genericDeclarationArray24, "class org.mockito.internal.util.concurrent.WeakConcurrentMap", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Object[]) genericDeclarationArray24);
        java.util.stream.Stream<java.lang.Object> objStream29 = weakConcurrentMap28.stream();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + cleaner10 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner10.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(genericDeclarationArray24);
        org.junit.Assert.assertNotNull(genericDeclarationArray27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertNotNull(objStream29);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet3.add("");
        strWeakConcurrentSet3.clear();
        int int7 = strWeakConcurrentSet3.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj3 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean4 = weakConcurrentMap2.equals(obj3);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner28 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner28 };
        java.util.LinkedHashSet<java.lang.Object> objSet30 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet30, objArray29);
        java.util.Spliterator<java.lang.Object> objSpliterator32 = objSet30.spliterator();
        java.lang.Object obj33 = org.mockito.internal.util.collections.Iterables.firstOf((java.lang.Iterable<java.lang.Object>) objSet30);
        java.lang.reflect.Field field34 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter36 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) objSet30, field34, true);
        boolean boolean37 = weakConcurrentMap2.containsAll((java.util.Collection<java.lang.Object>) objSet30);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap38 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet30);
        java.util.stream.Stream<java.lang.Object> objStream39 = weakConcurrentMap38.stream();
        java.lang.String str40 = org.mockito.internal.util.StringUtil.join("<<custom argument matcher><[]>null>", "[]", (java.util.Collection<java.lang.Object>) weakConcurrentMap38);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + cleaner28 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner28.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objSpliterator32);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short) 10 + "'", obj33.equals((short) 10));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "<<custom argument matcher><[]>null>[]10\n[]1\n[]1\n[]1.0\n[]false\n[]-1\n[]10\n[]100\n[]INLINE\n[]hi!\n[]-1\n[]10\n[]-1\n[]1.0\n[]-1.0\n[]10.0\n[]-1.0\n[]-1" + "'", str40.equals("<<custom argument matcher><[]>null>[]10\n[]1\n[]1\n[]1.0\n[]false\n[]-1\n[]10\n[]100\n[]INLINE\n[]hi!\n[]-1\n[]10\n[]-1\n[]1.0\n[]-1.0\n[]10.0\n[]-1.0\n[]-1"));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        try {
            org.mockito.internal.util.MockUtil.resetMock("[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        try {
            org.mockito.invocation.MockHandler<java.util.RandomAccess> randomAccessMockHandler6 = org.mockito.internal.util.MockUtil.getMockHandler((java.util.RandomAccess) instanceFieldList3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.mockito.internal.util.MockCreationValidator mockCreationValidator0 = new org.mockito.internal.util.MockCreationValidator();
        org.mockito.mock.SerializableMode serializableMode2 = null;
        mockCreationValidator0.validateConstructorUse(false, serializableMode2);
        org.mockito.mock.SerializableMode serializableMode5 = null;
        mockCreationValidator0.validateConstructorUse(true, serializableMode5);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields9 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter10 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields11 = instanceFields5.filter(instanceFieldFilter10);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(instanceFields9);
        org.junit.Assert.assertNotNull(instanceFields11);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap> weakConcurrentMapWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.concurrent.WeakConcurrentMap>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.reflection.BeanPropertySetter> beanPropertySetterWeakConcurrentSet3 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<org.mockito.internal.util.reflection.BeanPropertySetter>(cleaner0);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap2.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap2.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal10 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner8);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        java.lang.Object obj17 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal20 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner18);
        org.mockito.internal.util.MockNameImpl mockNameImpl22 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal20.set((org.mockito.mock.MockName) mockNameImpl22);
        mockNameDetachedThreadLocal10.set((org.mockito.mock.MockName) mockNameImpl22);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal10.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap26 = mockNameDetachedThreadLocal10.getBackingMap();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper27 = org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper.of((java.lang.Object) mockNameDetachedThreadLocal10);
        java.lang.Object obj28 = hashCodeAndEqualsMockWrapper27.get();
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails30 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails33 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails30, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails35 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails33, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper36 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails35);
        java.lang.Object obj37 = hashCodeAndEqualsMockWrapper36.get();
        java.lang.reflect.Field field38 = null;
        try {
            fieldCopier0.copyValue(hashCodeAndEqualsMockWrapper27, hashCodeAndEqualsMockWrapper36, field38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap26);
        org.junit.Assert.assertNotNull(hashCodeAndEqualsMockWrapper27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(defaultMockingDetails33);
        org.junit.Assert.assertNotNull(defaultMockingDetails35);
        org.junit.Assert.assertNotNull(obj37);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.contains("class org.mockito.internal.util.concurrent.WeakConcurrentMap");
        boolean boolean10 = strWeakConcurrentSet1.remove("");
        strWeakConcurrentSet1.expungeStaleEntries();
        java.util.Iterator<java.lang.String> strItor12 = strWeakConcurrentSet1.iterator();
        java.util.Iterator<java.lang.String> strItor13 = strWeakConcurrentSet1.iterator();
        boolean boolean15 = strWeakConcurrentSet1.contains("<<custom argument matcher><[]>null>");
        strWeakConcurrentSet1.clear();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner54 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner54 };
        java.util.LinkedHashSet<java.lang.Object> objSet56 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet56, objArray55);
        java.util.Spliterator<java.lang.Object> objSpliterator58 = objSet56.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet56);
        boolean boolean61 = weakConcurrentMap59.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap62 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap64 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap62, "hi!");
        int int65 = weakConcurrentMap64.size();
        java.util.Spliterator<java.lang.Object> objSpliterator66 = weakConcurrentMap64.spliterator();
        boolean boolean67 = weakConcurrentMap59.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap64);
        boolean boolean68 = weakConcurrentMap28.removeAll((java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        java.util.stream.Stream<java.lang.Object> objStream69 = weakConcurrentMap59.stream();
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + cleaner54 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner54.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objSpliterator58);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(weakConcurrentMap64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objStream69);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        strWeakConcurrentSet1.clear();
        java.util.Iterator<java.lang.String> strItor7 = strWeakConcurrentSet1.iterator();
        java.lang.Thread thread8 = strWeakConcurrentSet1.getCleanerThread();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNull(thread8);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        strWeakConcurrentSet1.expungeStaleEntries();
        java.lang.Thread thread3 = strWeakConcurrentSet1.getCleanerThread();
        java.util.Iterator<java.lang.String> strItor4 = strWeakConcurrentSet1.iterator();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNull(thread3);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray1 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList2 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList2, instanceFieldArray1);
        boolean boolean4 = instanceFieldListWithInlinedExpunction0.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList2);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor5 = instanceFieldListWithInlinedExpunction0.iterator();
        org.junit.Assert.assertNotNull(instanceFieldArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor5);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        boolean boolean3 = weakConcurrentMap0.add((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        cleanerEnumWeakConcurrentMap2.expungeStaleEntries();
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper5 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) cleanerEnumWeakConcurrentMap2);
        int int6 = cleanerEnumWeakConcurrentMap2.approximateSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap26 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner29 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj30 = cleanerEnumWeakConcurrentMap28.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner29);
        java.lang.Object obj31 = cleanerEnumWeakConcurrentMap26.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner29);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner32 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj33 = cleanerEnumWeakConcurrentMap26.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner32);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal34 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner32);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap36 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        java.lang.Object obj41 = cleanerEnumWeakConcurrentMap36.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner42 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj43 = cleanerEnumWeakConcurrentMap36.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner42);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal44 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner42);
        org.mockito.internal.util.MockNameImpl mockNameImpl46 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal44.set((org.mockito.mock.MockName) mockNameImpl46);
        mockNameDetachedThreadLocal34.set((org.mockito.mock.MockName) mockNameImpl46);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl46);
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertTrue("'" + cleaner29 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner29.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + cleaner32 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner32.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + cleaner42 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner42.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner23 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner23 };
        java.util.LinkedHashSet<java.lang.Object> objSet25 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet25, objArray24);
        java.util.Spliterator<java.lang.Object> objSpliterator27 = objSet25.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet25);
        boolean boolean30 = weakConcurrentMap28.contains((java.lang.Object) (short) 10);
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails31 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) weakConcurrentMap28);
        try {
            boolean boolean32 = defaultMockingDetails31.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner23 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner23.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objSpliterator27);
        org.junit.Assert.assertNotNull(weakConcurrentMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap7 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap9 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap7, "hi!");
        int int10 = weakConcurrentMap9.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean12 = weakConcurrentMap9.contains((java.lang.Object) cleaner11);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter13 = null;
        java.util.LinkedList<java.lang.Object> objList14 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap9, objFilter13);
        java.util.AbstractSequentialList<java.lang.Object> objList15 = instanceFieldListWithInlinedExpunction0.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, (java.util.AbstractSequentialList<java.lang.Object>) objList14);
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool16 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner18 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet19 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner18);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray20 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList21 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList21, instanceFieldArray20);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields23 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet19, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap24 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap24, "hi!");
        int int27 = weakConcurrentMap26.size();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner28 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        boolean boolean29 = weakConcurrentMap26.contains((java.lang.Object) cleaner28);
        org.mockito.internal.util.collections.ListUtil.Filter<java.lang.Object> objFilter30 = null;
        java.util.LinkedList<java.lang.Object> objList31 = org.mockito.internal.util.collections.ListUtil.filter((java.util.Collection<java.lang.Object>) weakConcurrentMap26, objFilter30);
        java.util.AbstractSequentialList<java.lang.Object> objList32 = instanceFieldListWithInlinedExpunction17.put((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList21, (java.util.AbstractSequentialList<java.lang.Object>) objList31);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray33 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList34 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList34, instanceFieldArray33);
        java.util.AbstractSequentialList<java.lang.Object> objList36 = instanceFieldListWithInlinedExpunction17.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList34);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction37 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray38 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList39 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39, instanceFieldArray38);
        boolean boolean41 = instanceFieldListWithInlinedExpunction37.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList39);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray42 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList43 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43, instanceFieldArray42);
        boolean boolean45 = instanceFieldListWithInlinedExpunction37.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList43);
        lenientCopyTool16.copyToRealObject(instanceFieldListWithInlinedExpunction17, instanceFieldListWithInlinedExpunction37);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor47 = instanceFieldListWithInlinedExpunction17.iterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction48 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner49 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet50 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner49);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray51 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList52 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList52, instanceFieldArray51);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields54 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet50, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList52);
        boolean boolean55 = instanceFieldListWithInlinedExpunction48.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList52);
        java.util.AbstractSequentialList<java.lang.Object> objList56 = instanceFieldListWithInlinedExpunction17.remove((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList52);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction57 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray58 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList59 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList59, instanceFieldArray58);
        boolean boolean61 = instanceFieldListWithInlinedExpunction57.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList59);
        boolean boolean62 = instanceFieldListWithInlinedExpunction17.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList59);
        java.util.AbstractSequentialList<java.lang.Object> objList63 = instanceFieldListWithInlinedExpunction0.get((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList59);
        java.util.Iterator<java.util.Map.Entry<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>> instanceFieldListEntryItor64 = instanceFieldListWithInlinedExpunction0.iterator();
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(objList15);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner18.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + cleaner28 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner28.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(objList32);
        org.junit.Assert.assertNotNull(instanceFieldArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(objList36);
        org.junit.Assert.assertNotNull(instanceFieldArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(instanceFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor47);
        org.junit.Assert.assertTrue("'" + cleaner49 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner49.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(objList56);
        org.junit.Assert.assertNotNull(instanceFieldArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(objList63);
        org.junit.Assert.assertNotNull(instanceFieldListEntryItor64);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        java.lang.String str1 = org.mockito.internal.util.StringUtil.decamelizeMatcher("[]10\n1\n1\n1.0\nfalse\n-1\n10\n100\nINLINE\nhi!\n-1\n10\n-1\n1.0\n-1.0\n10.0\n-1.0\n-1");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "<1 0\n 1\n 1\n 1. 0\nfalse\n- 1\n 1 0\n 1 0 0\n i n l i n e\nhi!\n- 1\n 1 0\n- 1\n 1. 0\n- 1. 0\n 1 0. 0\n- 1. 0\n- 1>" + "'", str1.equals("<1 0\n 1\n 1\n 1. 0\nfalse\n- 1\n 1 0\n 1 0 0\n i n l i n e\nhi!\n- 1\n 1 0\n- 1\n 1. 0\n- 1. 0\n 1 0. 0\n- 1. 0\n- 1>"));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl27 = new org.mockito.internal.util.MockNameImpl("<[]>");
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl27);
        org.mockito.mock.MockName mockName29 = mockNameDetachedThreadLocal9.get();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
        org.junit.Assert.assertNull(mockName29);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.mockito.internal.util.reflection.FieldCopier fieldCopier0 = new org.mockito.internal.util.reflection.FieldCopier();
        try {
            org.mockito.internal.util.MockUtil.resetMock(fieldCopier0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        try {
            java.util.Collection<org.mockito.stubbing.Stubbing> stubbingCollection7 = defaultMockingDetails6.getStubbings();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.mockito.internal.util.collections.IdentitySet identitySet0 = new org.mockito.internal.util.collections.IdentitySet();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap2 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner5 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap4.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap2.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner5);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner8 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj9 = cleanerEnumWeakConcurrentMap2.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner8);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal10 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner8);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap14 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner15 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap14.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        java.lang.Object obj17 = cleanerEnumWeakConcurrentMap12.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner15);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap12.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal20 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner18);
        org.mockito.internal.util.MockNameImpl mockNameImpl22 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal20.set((org.mockito.mock.MockName) mockNameImpl22);
        mockNameDetachedThreadLocal10.set((org.mockito.mock.MockName) mockNameImpl22);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap25 = mockNameDetachedThreadLocal10.getBackingMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap26 = mockNameDetachedThreadLocal10.getBackingMap();
        boolean boolean27 = identitySet0.contains((java.lang.Object) mockNameDetachedThreadLocal10);
        mockNameDetachedThreadLocal10.clearAll();
        org.mockito.mock.MockName mockName29 = mockNameDetachedThreadLocal10.get();
        org.junit.Assert.assertTrue("'" + cleaner5 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner5.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + cleaner8 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner8.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + cleaner15 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner15.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap25);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(mockName29);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable3 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap1, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        cleanerEnumWeakConcurrentMap5.expungeStaleEntries();
        boolean boolean9 = weakConcurrentMap1.add((java.lang.Object) cleanerEnumWeakConcurrentMap5);
        java.util.Spliterator<java.lang.Object> objSpliterator10 = weakConcurrentMap1.spliterator();
        java.lang.Object[] objArray11 = weakConcurrentMap1.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil14 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil15 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil18 = org.mockito.internal.util.Checks.checkNotNull(iOUtil15, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap19 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor20 = weakConcurrentMap19.iterator();
        boolean boolean22 = weakConcurrentMap19.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1, 100.0f, listUtil14, "hi!", (byte) 1, 'a' };
        java.lang.String str25 = org.mockito.internal.util.StringUtil.join(objArray24);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap26 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray24);
        lenientCopyTool0.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap1, (java.util.Collection<java.lang.Object>) weakConcurrentMap26);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap28 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Object obj29 = org.mockito.internal.util.JavaEightUtil.emptyOptionalDouble();
        boolean boolean30 = weakConcurrentMap28.equals(obj29);
        java.util.Iterator<java.lang.Object> objItor31 = weakConcurrentMap28.iterator();
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool33 = new org.mockito.internal.util.reflection.LenientCopyTool();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap34 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.lang.Iterable<java.lang.Object> objIterable36 = org.mockito.internal.util.Checks.checkItemsNotNull((java.lang.Iterable<java.lang.Object>) weakConcurrentMap34, "");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap38 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner39 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj40 = cleanerEnumWeakConcurrentMap38.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner39);
        cleanerEnumWeakConcurrentMap38.expungeStaleEntries();
        boolean boolean42 = weakConcurrentMap34.add((java.lang.Object) cleanerEnumWeakConcurrentMap38);
        java.util.Spliterator<java.lang.Object> objSpliterator43 = weakConcurrentMap34.spliterator();
        java.lang.Object[] objArray44 = weakConcurrentMap34.toArray();
        org.mockito.internal.util.collections.ListUtil listUtil47 = new org.mockito.internal.util.collections.ListUtil();
        org.mockito.internal.util.io.IOUtil iOUtil48 = new org.mockito.internal.util.io.IOUtil();
        org.mockito.internal.util.io.IOUtil iOUtil51 = org.mockito.internal.util.Checks.checkNotNull(iOUtil48, "hi!", "hi!");
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap52 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor53 = weakConcurrentMap52.iterator();
        boolean boolean55 = weakConcurrentMap52.contains((java.lang.Object) (byte) 1);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 1, 100.0f, listUtil47, "hi!", (byte) 1, 'a' };
        java.lang.String str58 = org.mockito.internal.util.StringUtil.join(objArray57);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap59 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of(objArray57);
        lenientCopyTool33.copyToRealObject((java.util.Collection<java.lang.Object>) weakConcurrentMap34, (java.util.Collection<java.lang.Object>) weakConcurrentMap59);
        java.lang.String str61 = org.mockito.internal.util.StringUtil.join("hi!", (java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean62 = weakConcurrentMap28.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap34);
        boolean boolean63 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap28);
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap64 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        java.util.Iterator<java.lang.Object> objItor65 = weakConcurrentMap64.iterator();
        java.util.Iterator<java.lang.Object> objItor66 = weakConcurrentMap64.iterator();
        weakConcurrentMap64.clear();
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner91 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (short) 10, (byte) 100, 1.0d, 1, (-1.0f), 10.0f, (byte) 1, 1, 10.0f, (-1.0d), (short) -1, "hi!", 1.0d, (byte) 1, 1.0f, (short) -1, 10, 10L, false, (byte) -1, (-1L), false, (-1), cleaner91 };
        java.util.LinkedHashSet<java.lang.Object> objSet93 = new java.util.LinkedHashSet<java.lang.Object>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objSet93, objArray92);
        java.util.Spliterator<java.lang.Object> objSpliterator95 = objSet93.spliterator();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap96 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objSet93);
        boolean boolean97 = weakConcurrentMap64.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap96);
        boolean boolean98 = weakConcurrentMap26.containsAll((java.util.Collection<java.lang.Object>) weakConcurrentMap96);
        try {
            java.lang.String str99 = weakConcurrentMap96.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
        org.junit.Assert.assertNotNull(objIterable3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(iOUtil18);
        org.junit.Assert.assertNotNull(objItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(weakConcurrentMap26);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(objIterable36);
        org.junit.Assert.assertTrue("'" + cleaner39 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner39.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objSpliterator43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(iOUtil51);
        org.junit.Assert.assertNotNull(objItor53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(weakConcurrentMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objItor65);
        org.junit.Assert.assertNotNull(objItor66);
        org.junit.Assert.assertTrue("'" + cleaner91 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner91.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(objSpliterator95);
        org.junit.Assert.assertNotNull(weakConcurrentMap96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner12);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport16 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap11, false, false);
        java.lang.Class<?> wildcardClass17 = fieldInitializationReport16.fieldClass();
        boolean boolean18 = fieldInitializationReport16.fieldWasInitializedUsingContructorArgs();
        java.lang.Object obj19 = fieldInitializationReport16.fieldInstance();
        boolean boolean20 = wildCardBoundedType1.equals((java.lang.Object) fieldInitializationReport16);
        try {
            java.lang.String str21 = wildCardBoundedType1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        java.util.List<java.lang.Object> objList7 = instanceFields6.assignedValues();
        java.util.List<org.mockito.internal.util.reflection.InstanceField> instanceFieldList8 = instanceFields6.instanceFields();
        java.util.List<java.lang.String> strList9 = instanceFields6.names();
        java.lang.reflect.Field field10 = null;
        org.mockito.internal.util.reflection.BeanPropertySetter beanPropertySetter11 = new org.mockito.internal.util.reflection.BeanPropertySetter((java.lang.Object) strList9, field10);
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractSet<java.lang.Object>, org.mockito.internal.util.reflection.FieldInitializationReport> objSetWithInlinedExpunction12 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractSet<java.lang.Object>, org.mockito.internal.util.reflection.FieldInitializationReport>();
        try {
            boolean boolean13 = beanPropertySetter11.set((java.lang.Object) objSetWithInlinedExpunction12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(instanceFieldList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        java.lang.Class<?> wildcardClass7 = fieldInitializationReport6.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap9 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner10 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj11 = cleanerEnumWeakConcurrentMap9.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner10);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport14 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap9, false, false);
        java.lang.Class<?> wildcardClass15 = fieldInitializationReport14.fieldClass();
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap17 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner18 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj19 = cleanerEnumWeakConcurrentMap17.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner18);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport22 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap17, false, false);
        java.lang.Class<?> wildcardClass23 = fieldInitializationReport22.fieldClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray24 = new java.lang.reflect.GenericDeclaration[] { wildcardClass7, wildcardClass15, wildcardClass23 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray27 = org.mockito.internal.util.Checks.checkNotNull(genericDeclarationArray24, "class org.mockito.internal.util.concurrent.WeakConcurrentMap", "hi!");
        java.lang.String str28 = org.mockito.internal.util.StringUtil.join((java.lang.Object[]) genericDeclarationArray24);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + cleaner10 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner10.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + cleaner18 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner18.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(genericDeclarationArray24);
        org.junit.Assert.assertNotNull(genericDeclarationArray27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap" + "'", str28.equals("\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap"));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        java.lang.reflect.WildcardType wildcardType0 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType1 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType0);
        java.lang.reflect.WildcardType wildcardType2 = wildCardBoundedType1.wildCard();
        java.lang.reflect.Type[] typeArray3 = wildCardBoundedType1.interfaceBounds();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap4 = new org.mockito.internal.util.concurrent.WeakConcurrentMap();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap6 = org.mockito.internal.util.Checks.checkItemsNotNull(weakConcurrentMap4, "hi!");
        boolean boolean8 = weakConcurrentMap6.equals((java.lang.Object) (-1));
        boolean boolean9 = wildCardBoundedType1.equals((java.lang.Object) (-1));
        java.lang.reflect.Type[] typeArray10 = wildCardBoundedType1.interfaceBounds();
        java.lang.reflect.Type[] typeArray11 = wildCardBoundedType1.interfaceBounds();
        java.lang.reflect.WildcardType wildcardType12 = wildCardBoundedType1.wildCard();
        java.lang.reflect.WildcardType wildcardType13 = wildCardBoundedType1.wildCard();
        org.junit.Assert.assertNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(weakConcurrentMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNull(wildcardType12);
        org.junit.Assert.assertNull(wildcardType13);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray2 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList3 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3, instanceFieldArray2);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields5 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet1, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = instanceFields5.notNull();
        org.mockito.internal.util.collections.ListUtil.Filter<org.mockito.internal.util.reflection.InstanceField> instanceFieldFilter7 = null;
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields8 = instanceFields5.filter(instanceFieldFilter7);
        java.util.List<java.lang.String> strList9 = instanceFields5.names();
        java.util.List<java.lang.Object> objList10 = instanceFields5.assignedValues();
        org.mockito.internal.util.concurrent.WeakConcurrentMap weakConcurrentMap11 = org.mockito.internal.util.concurrent.WeakConcurrentMap.of((java.lang.Iterable<java.lang.Object>) objList10);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instanceFields6);
        org.junit.Assert.assertNotNull(instanceFields8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNotNull(weakConcurrentMap11);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) ' ');
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails4 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails1, "", "hi!");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails6 = org.mockito.internal.util.Checks.checkNotNull(defaultMockingDetails4, "hi!");
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper hashCodeAndEqualsMockWrapper7 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper((java.lang.Object) defaultMockingDetails6);
        org.mockito.MockingDetails mockingDetails10 = org.mockito.internal.util.Checks.checkNotNull((org.mockito.MockingDetails) defaultMockingDetails6, "\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap\nclass org.mockito.internal.util.concurrent.WeakConcurrentMap", "\n[]");
        org.junit.Assert.assertNotNull(defaultMockingDetails4);
        org.junit.Assert.assertNotNull(defaultMockingDetails6);
        org.junit.Assert.assertNotNull(mockingDetails10);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap10 = mockNameDetachedThreadLocal9.getBackingMap();
        org.mockito.internal.util.MockNameImpl mockNameImpl12 = new org.mockito.internal.util.MockNameImpl("");
        java.lang.String str13 = mockNameImpl12.toString();
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl12);
        java.lang.String str15 = mockNameImpl12.toString();
        boolean boolean16 = mockNameImpl12.isDefault();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap10);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>> instanceFieldListWithInlinedExpunction0 = new org.mockito.internal.util.concurrent.WeakConcurrentMap.WithInlinedExpunction<java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>, java.util.AbstractSequentialList<java.lang.Object>>();
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner1 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet2 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner1);
        org.mockito.internal.util.reflection.InstanceField[] instanceFieldArray3 = new org.mockito.internal.util.reflection.InstanceField[] {};
        java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField> instanceFieldList4 = new java.util.ArrayList<org.mockito.internal.util.reflection.InstanceField>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4, instanceFieldArray3);
        org.mockito.internal.util.reflection.Fields.InstanceFields instanceFields6 = new org.mockito.internal.util.reflection.Fields.InstanceFields((java.lang.Object) strWeakConcurrentSet2, (java.util.List<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        boolean boolean7 = instanceFieldListWithInlinedExpunction0.containsKey((java.util.AbstractList<org.mockito.internal.util.reflection.InstanceField>) instanceFieldList4);
        int int8 = instanceFieldListWithInlinedExpunction0.approximateSize();
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport11 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) int8, true, true);
        org.junit.Assert.assertTrue("'" + cleaner1 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner1.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(instanceFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.THREAD));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap3 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner4 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj5 = cleanerEnumWeakConcurrentMap3.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        java.lang.Object obj6 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner4);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner7 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj8 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner7);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal9 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner7);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap13 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner14 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj15 = cleanerEnumWeakConcurrentMap13.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        java.lang.Object obj16 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner14);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner17 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD;
        java.lang.Object obj18 = cleanerEnumWeakConcurrentMap11.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner17);
        org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName> mockNameDetachedThreadLocal19 = new org.mockito.internal.util.concurrent.DetachedThreadLocal<org.mockito.mock.MockName>(cleaner17);
        org.mockito.internal.util.MockNameImpl mockNameImpl21 = new org.mockito.internal.util.MockNameImpl("");
        mockNameDetachedThreadLocal19.set((org.mockito.mock.MockName) mockNameImpl21);
        mockNameDetachedThreadLocal9.set((org.mockito.mock.MockName) mockNameImpl21);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Thread, org.mockito.mock.MockName> threadWeakConcurrentMap24 = mockNameDetachedThreadLocal9.getBackingMap();
        mockNameDetachedThreadLocal9.clear();
        mockNameDetachedThreadLocal9.clear();
        org.junit.Assert.assertTrue("'" + cleaner4 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner4.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + cleaner7 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner7.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + cleaner14 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner14.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + cleaner17 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD + "'", cleaner17.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.THREAD));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(threadWeakConcurrentMap24);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails((java.lang.Object) 100L);
        try {
            boolean boolean2 = defaultMockingDetails1.isSpy();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)");
        } catch (java.lang.IllegalStateException e) {
        }
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        java.lang.Thread thread4 = strWeakConcurrentSet1.getCleanerThread();
        boolean boolean6 = strWeakConcurrentSet1.add("");
        boolean boolean8 = strWeakConcurrentSet1.remove("");
        boolean boolean10 = strWeakConcurrentSet1.add("[]");
        int int11 = strWeakConcurrentSet1.approximateSize();
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertNull(thread4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger0 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        java.lang.reflect.AccessibleObject accessibleObject1 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject1);
        java.lang.reflect.AccessibleObject accessibleObject3 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject3);
        java.lang.reflect.AccessibleObject accessibleObject5 = null;
        try {
            accessibilityChanger0.enableAccess(accessibleObject5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.mockito.internal.util.reflection.LenientCopyTool lenientCopyTool0 = new org.mockito.internal.util.reflection.LenientCopyTool();
        java.lang.reflect.WildcardType wildcardType1 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType2 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType1);
        java.lang.reflect.WildcardType wildcardType3 = wildCardBoundedType2.wildCard();
        java.lang.reflect.WildcardType wildcardType4 = null;
        org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType5 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType4);
        java.lang.reflect.WildcardType wildcardType6 = wildCardBoundedType5.wildCard();
        java.lang.reflect.WildcardType wildcardType7 = wildCardBoundedType5.wildCard();
        lenientCopyTool0.copyToRealObject(wildCardBoundedType2, wildCardBoundedType5);
        java.lang.reflect.AnnotatedElement annotatedElement9 = null;
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap11 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner12 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap11.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner12);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport16 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap11, false, false);
        boolean boolean17 = fieldInitializationReport16.fieldWasInitialized();
        java.lang.Class<?> wildcardClass18 = fieldInitializationReport16.fieldClass();
        try {
            lenientCopyTool0.copyToRealObject(annotatedElement9, (java.lang.reflect.AnnotatedElement) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(wildcardType3);
        org.junit.Assert.assertNull(wildcardType6);
        org.junit.Assert.assertNull(wildcardType7);
        org.junit.Assert.assertTrue("'" + cleaner12 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner12.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap5 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner6 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj7 = cleanerEnumWeakConcurrentMap5.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        boolean boolean8 = cleanerEnumWeakConcurrentMap1.containsKey((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner6);
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap10 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner11 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj12 = cleanerEnumWeakConcurrentMap10.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner11);
        java.lang.Object obj13 = cleanerEnumWeakConcurrentMap1.remove((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner11);
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + cleaner6 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner6.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + cleaner11 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner11.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.mockito.internal.util.reflection.AccessibilityChanger accessibilityChanger0 = new org.mockito.internal.util.reflection.AccessibilityChanger();
        java.lang.reflect.AccessibleObject accessibleObject1 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject1);
        java.lang.reflect.AccessibleObject accessibleObject3 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject3);
        java.lang.reflect.AccessibleObject accessibleObject5 = null;
        accessibilityChanger0.safelyDisableAccess(accessibleObject5);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object> cleanerEnumWeakConcurrentMap1 = new org.mockito.internal.util.concurrent.WeakConcurrentMap<java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>, java.lang.Object>(false);
        org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner cleaner2 = org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE;
        java.lang.Object obj3 = cleanerEnumWeakConcurrentMap1.get((java.lang.Enum<org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner>) cleaner2);
        org.mockito.internal.util.reflection.FieldInitializationReport fieldInitializationReport6 = new org.mockito.internal.util.reflection.FieldInitializationReport((java.lang.Object) cleanerEnumWeakConcurrentMap1, false, false);
        boolean boolean7 = fieldInitializationReport6.fieldWasInitialized();
        boolean boolean8 = fieldInitializationReport6.fieldWasInitialized();
        java.lang.Object obj9 = fieldInitializationReport6.fieldInstance();
        org.junit.Assert.assertTrue("'" + cleaner2 + "' != '" + org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE + "'", cleaner2.equals(org.mockito.internal.util.concurrent.DetachedThreadLocal.Cleaner.INLINE));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner cleaner0 = org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE;
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet1 = new org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String>(cleaner0);
        org.mockito.internal.util.concurrent.WeakConcurrentSet<java.lang.String> strWeakConcurrentSet3 = org.mockito.internal.util.Checks.checkNotNull(strWeakConcurrentSet1, "");
        boolean boolean5 = strWeakConcurrentSet1.contains("hi!");
        strWeakConcurrentSet1.clear();
        strWeakConcurrentSet1.expungeStaleEntries();
        strWeakConcurrentSet1.clear();
        boolean boolean10 = strWeakConcurrentSet1.add("[]");
        org.junit.Assert.assertTrue("'" + cleaner0 + "' != '" + org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE + "'", cleaner0.equals(org.mockito.internal.util.concurrent.WeakConcurrentSet.Cleaner.INLINE));
        org.junit.Assert.assertNotNull(strWeakConcurrentSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        java.io.File file1 = null;
        try {
            org.mockito.internal.util.io.IOUtil.writeText("[]", file1);
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.base.MockitoException; message: Problems writing text to file: null");
        } catch (org.mockito.exceptions.base.MockitoException e) {
        }
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        java.lang.Object obj0 = null;
        org.mockito.internal.util.DefaultMockingDetails defaultMockingDetails1 = new org.mockito.internal.util.DefaultMockingDetails(obj0);
        try {
            java.lang.String str2 = defaultMockingDetails1.printInvocations();
            org.junit.Assert.fail("Expected exception of type org.mockito.exceptions.misusing.NotAMockException; message: Argument passed to Mockito.mockingDetails() should be a mock, but is null!");
        } catch (org.mockito.exceptions.misusing.NotAMockException e) {
        }
    } 
}

